(()=>{var e,t,a={7464:(e,t,a)=>{"use strict";var i=a(6254),o=a.n(i);class s{constructor(){this.paths={},this.models={},this.units="mm"}}class n extends s{constructor(e,t,a=!1){super();let i=[];a&&e.push(e[0]);for(let t=0;t<=e.length-2;t++)i.push([e[t],e[t+1]]);let s=i.map((e=>new(o().paths.Line)(e[0],e[1]))),n=[];t.forEach(((e,t)=>{e&&n.push(o().path.fillet(s[t],s[t+1>=s.length?0:t+1],e))})),s.concat(n).forEach(((e,t)=>{o().path.addTo(e,this,t)}))}}class l extends s{constructor(e,t,a=[],i=!0,s=null,n=!1){super();let l=o().angle.ofPointInDegrees(e,t)+90,r=0;(a=Array.isArray(a)?a:[a]).forEach((a=>{let n;if(i?r+=a:r=a,0==r)n=new(o().paths.Line)(e,t);else{let a=o().point.fromPolar(o().angle.toRadians(l),r);n=new(o().paths.Line)(o().point.add(e,a),o().point.add(t,a))}s&&o().path.layer(n,s),o().model.addPath(this,n)}))}}class r{EmptyModel=s;FilletedPathModel=n;OffsetLinesAtIntervals=l;lineFromPointAtAngle(e,t,a){let i=o().angle.toRadians(a),s=o().point.add(e,o().point.fromPolar(i,t));return new(o().paths.Line)(e,s)}enableSplitting(e){e.split={ifNeeded:!0,axis:"auto"}}autoCaptionModel(e,t,a=12,i="bottom"){let s=o().measure.modelExtents(e);return o().model.addCaption(e,t,[s.low[0],s.low[1]],[s.high[0],s.high[1]]),e}cloneAndOffset(e,t=[0,0]){return o().model.moveRelative(o().model.clone(e),t)}pointFromPointAtAngle(e,t,a){let i=o().angle.toRadians(a);return o().point.add(e,o().point.fromPolar(i,t))}pointFromPointLineAtAngle(e,t,a,i){i=Object.assign({clockwise:!1,angle:90,inset:0},i);let s=o().angle.ofPointInDegrees(e,t)-(i.clockwise?i.angle:-i.angle),n=a;return i.angle>0&&(n=a/Math.sin(Math.PI*i.angle/180)),this.pointFromPointAtAngle(e,n,s)}tabPointsFromPointLine(e,t,a){if(0!=(a=Object.assign({distance:0,clockwise:!1,angle:90,baseInset:0,baseInset2:null,angle2:null},a)).distance){let i=e.slice(),o=t.slice();null==a.baseInset2&&(a.baseInset2=a.baseInset),a.baseInset>0&&(i=this.pointFromPointLineAtAngle(e,t,a.baseInset,{clockwise:a.clockwise,angle:0})),a.baseInset2>0&&(o=this.pointFromPointLineAtAngle(t,e,a.baseInset2,{clockwise:a.clockwise,angle:0}));let s=this.pointFromPointLineAtAngle(i,o,a.distance,{clockwise:a.clockwise,angle:a.angle,inset:a.inset});null==a.angle2&&(a.angle2=a.angle);let n=this.pointFromPointLineAtAngle(o,i,a.distance,{clockwise:!a.clockwise,angle:a.angle2,inset:a.inset}),l=[];return a.baseInset>0&&l.push(i),l.push(s),l.push(n),a.baseInset2>0&&l.push(o),l}return[e,t]}relativePointListToAbsolute(e){let t=[0,0];return e.map((e=>{let a=o().point.add(t,e);return t=a,a}))}drawEnglishPoint(e,t,a){let i=Object.assign({},{riserPCT:1.2},a).riserPCT,s=o().measure.pointDistance(e,t)*i,n=o().angle.ofPointInDegrees(e,t),l=this.pointFromPointAtAngle(e,s,n),r=this.pointFromPointAtAngle(t,s,180+n),h=o().point.average(e,t),d=new(o().paths.Circle)(l,s),c=new(o().paths.Circle)(r,s),p=o().path.intersection(d,c),g=o().measure.pointDistance(p.intersectionPoints[0],p.intersectionPoints[1]),u=this.pointFromPointAtAngle(h,g/2,n+90),m=o().angle.ofPointInDegrees(l,u),w=o().angle.ofPointInDegrees(r,u),P=new this.EmptyModel;return o().model.addPath(P,o().path.layer(new(o().paths.Line)(h,u),"stitch")),o().model.addPath(P,new(o().paths.Arc)(l,s,m,n+180)),o().model.addPath(P,new(o().paths.Arc)(r,s,n,w)),P}addTabAtPointLineAtLineIndex(e,t,a){a=Object.assign({distance:0,clockwise:!1,angle:90,angle2:null,autoWrap:!0},a);let i=e[t],o=t+1;t+1>e.length-1&&a.autoWrap&&(o=0);let s=e[o],n=this.tabPointsFromPointLine(i,s,a);return e.splice(t+1,0,...n),e}determineBendAllowance(e){null==(e=Object.assign({angle:90,materialThickness:1,innerRadius:null,k:.5,singleSided:!1},e)).innerRadius&&(e.innerRadius=Math.max(.5,e.materialThickness/4));let t=e.angle*(Math.PI/180)*(e.innerRadius+e.k*e.materialThickness);return e.singleSided&&(t/=2),t}chordalTrapezoidPointLine(e){(e=Object.assign({radiusDelta:45,innerChordLength:10,outerChordLength:null,innerRadius:null,outerRadius:null,angle:30},e)).innerRadius||(e.innerRadius=e.innerChordLength/Math.sin(e.angle/2*(Math.PI/180))),e.radiusDelta?e.outerRadius=e.innerRadius+e.radiusDelta:e.radiusDelta||(e.outerRadius=e.outerChordLength/Math.sin(e.angle/2*(Math.PI/180)));let t=[];return t.push([0,0]),t.push(this.pointFromPointAtAngle([0,-e.innerRadius],e.innerRadius,90-e.angle)),t.push(this.pointFromPointAtAngle([0,-e.innerRadius],e.outerRadius,90-e.angle)),t.push([0,e.outerRadius-e.innerRadius]),t}cardSlotPointLine(e,t,a=!1,i=null){null==(i=Object.assign({baseWidthPCT:.75,baseWidth:null,stitchAllowance:3.8,sideInset:null,cardStickOutPCT:.2,cardStickOut:null,slotRiseAmountPCT:.2,slotRiseAmount:null,topLineSlopePCT:null,topLineSlopeRise:0,topLinePoints:null},i)).sideInset&&(i.sideInset=i.stitchAllowance),null==i.baseWidth&&(i.baseWidth=i.baseWidthPCT*e),null==i.cardStickOut&&(i.cardStickOut=i.cardStickOutPCT*t),null==i.slotRiseAmount&&(i.slotRiseAmount=i.slotRiseAmountPCT*t),null!=i.topLineSlopePCT&&(i.topLineSlopeRise=t*i.topLineSlopePCT),null==i.topLineSlopeRise&&(i.topLineSlopeRise=0);let o=t-i.cardStickOut,s=e,n=[];return n.push([0,o]),n.push([i.stitchAllowance,o]),n.push([s-i.stitchAllowance,o+i.topLineSlopeRise]),n.push([s,o+i.topLineSlopeRise]),a?(n.push([s,o+i.topLineSlopeRise-i.slotRiseAmount]),n.push([s-i.sideInset,o+i.topLineSlopeRise-i.slotRiseAmount]),n.push([(s+i.baseWidth)/2,0]),n.push([(s-i.baseWidth)/2,0]),n.push([i.sideInset,o-i.slotRiseAmount]),n.push([0,o-i.slotRiseAmount])):(n.push([s,0]),n.push([0,0])),n}}class h{constructor(e){let t=Object.assign({defaultPackAreaHeight:1e3,defaultPackAreaWidth:2e3,growLimitHeight:-1,growLimitWidth:-1,canGrowPackArea:!1,canAddPackAreas:!0},e);this.defaultPackAreaHeight=t.defaultPackAreaHeight,this.defaultPackAreaWidth=t.defaultPackAreaWidth,this.canGrowPackArea=t.canGrowPackArea,this.canAddPackAreas=t.canAddPackAreas,this.availableHeap=[],this.packAreaDefinitions=[],this.packAreaMaxIndex=0,this.packedBlocks=[],this.addPackArea()}packedAreas(){return this.packAreaDefinitions.map((e=>({id:e.a,h:e.h,w:e.w,blocks:this.packedBlocks.filter((t=>t.a==e.a))})))}addPackArea(e=null,t=null){e||(e=this.defaultPackAreaWidth),t||(t=this.defaultPackAreaHeight);let a={x:0,y:0,w:e,h:t,a:++this.packAreaMaxIndex};return this.packAreaDefinitions.push(Object.assign({},a)),this.availableHeap.push(a),a}growPackArea(e,t,a=-1){let i=null;i=a<0?this.packAreaDefinitions[this.packAreaDefinitions.length-1]:this.packAreaDefinitions.find((e=>e.id==a)),i.w,Math.max(i.h,t),i.h,Math.max(i.w,e);let o=i.w+e<i.h+t,s=o?i.w+e:Math.max(i.w,e),n=o?Math.max(i.h,t):i.h+t,l=this.availableHeap.filter((e=>e.a==i.a)),r=(l.filter((e=>e.x+e.w==i.w)),l.filter((e=>e.y+e.h==i.h)),s-i.w),h=n-i.h;o?(this.availableHeap.push({s:1,a:i.a,x:i.x+i.w,y:i.y,w:r,h:i.h+h}),this.availableHeap.push({s:2,a:i.a,x:i.x,y:i.y+i.h,w:i.w,h})):(this.availableHeap.push({e:1,a:i.a,x:i.x,y:i.y+i.h,w:i.w+r,h}),this.availableHeap.push({e:2,a:i.a,x:i.x+i.w,y:i.y,w:r,h:i.h})),i.w=s,i.h=n,this.sortHeapForPacking()}sortBlocksForPacking(e){return e.sort(((e,t)=>t.w*t.h-e.w*e.h)),e}sortHeapForPacking(){this.availableHeap.sort(((e,t)=>e.w*e.h-t.w*t.h))}splitRemainingHeap(e,t){let a,i;return e.w-t.w>=e.h-t.h?(a={x:e.x+t.w,y:e.y,w:e.w-t.w,h:e.h},i={x:e.x,y:e.y+t.h,w:t.w,h:e.h-t.h}):(a={x:e.x,y:e.y+t.h,w:e.w,h:e.h-t.h},i={x:e.x+t.w,y:e.y,w:e.w-t.w,h:t.h}),a.a=e.a,i.a=e.a,[a,i]}packBlockInAvailableAreas(e){let t=!1,a=this.availableHeap.findIndex((t=>t.w>=e.w&&t.h>=e.h));if(a>-1){let i=this.availableHeap[a],o={w:e.w,h:e.h,x:i.x,y:i.y,a:i.a,id:e.id,rotated:e.rotated,model:e.model};this.packedBlocks.push(o);let s=this.splitRemainingHeap(i,e);this.availableHeap.splice(a,1,s[0],s[1]),this.sortHeapForPacking(),t=!0}return t}trimEmptyPackAreas(){this.packAreaDefinitions=this.packAreaDefinitions.filter((e=>this.packedBlocks.filter((t=>t.a==e.a)).length>0));let e=this.packAreaDefinitions.map((e=>e.a));this.availableHeap=this.availableHeap.filter((t=>e.includes(t.a)))}packBlock(e){this.packAreaDefinitions.length<1&&this.addPackArea();let t=this.packBlockInAvailableAreas(e);return!t&&this.canGrowPackArea&&(this.growPackArea(e.w+1,e.h+1),t=this.packBlockInAvailableAreas(e)),!t&&this.canAddPackAreas&&(this.addPackArea(),t=this.packBlockInAvailableAreas(e)),t||this.trimEmptyPackAreas(),t}}class d{trimModelToLine(e,t,a=!0,i=!0,s=5,n=!0,l=!0){const r=.2;l&&(e=o().model.clone(e));let h,d,c,p,g,u,m=o().measure.modelExtents(e);if(console.log("Cutting"),i?(h=new(o().paths.Line)([m.low[0]+t+(a?-s:s),m.low[1]-m.height*r],[m.low[0]+t+(a?-s:s),m.high[1]+m.height*r]),c=(a?m.width-t:t)+2*s,p=a?m.low[0]+t-s:m.low[0]-s,g=m.height+2*s,u=m.low[1]-s):(h=new(o().paths.Line)([m.low[0]-m.width*r,m.low[1]+t+(a?-s:s)],[m.high[0]+m.width*r,m.low[1]+t+(a?-s:s)]),c=m.width+2*s,p=m.low[0]-s,g=(a?m.height-t:t)+2*s,u=a?m.low[0]+t-s:m.low[0]-s),d=o().model.move(new(o().models.Rectangle)(c,g),[p,u]),console.log(m,p,c,u,d,g),o().model.walk(e,{onPath:e=>{let t=o().path.intersection(e.pathContext,h);t&&t.intersectionPoints.forEach((t=>{let a=o().path.breakAtPoint(e.pathContext,t);o().model.addPath(e.modelContext,a)}))}}),o().model.walk(e,{onPath:e=>{o().model.isPathInsideModel(e.pathContext,d,e.offset)||delete e.modelContext.paths[e.pathId]}}),n){let a;a=i?new(o().paths.Line)([m.low[0]+t,m.low[1]-3],[m.low[0]+t,m.high[1]+3]):new(o().paths.Line)([m.low[0]-3,m.low[1]+t],[m.high[0]+3,m.low[1]+t]),o().path.layer(a,"patternJoinLine"),o().model.addPath(e,a)}return e}splitModel(e,t=.5,a=!0){let i=o().measure.modelExtents(e),s=a?t*i.width:t*i.height;return{models:{a:this.trimModelToLine(e,s,!0,a),b:this.trimModelToLine(e,s,!1,a)}}}}class c{constructor(e){let t=Object.assign({pageSize:{x:1e3,y:1e3},pageSizeGrowLimit:{x:-1,y:-1},canAddPages:!0,canGrowPageSize:!1,allowRotation:!0,allowSplitting:!0,maxSplitIterations:3},e);this.pageSize=t.pageSize,this.pageSizeGrowLimit=t.pageSizeGrowLimit,this.canAddPages=t.canAddPages,this.canGrowPageSize=t.canGrowPageSize,this.allowRotation=t.allowRotation,this.allowSplitting=t.allowSplitting,this.maxSplitIterations=t.maxSplitIterations}createModelBlock(e,t){let a=o().measure.modelExtents(e);return{id:t,model:e,w:a.width,h:a.height,rotated:!1,splitCount:0}}packModels(e){let t=[],a=e.reduce(((e,a,i)=>{let o=this.createModelBlock(a,i);return o.w&&o.h?e.push(o):t.push(o),e}),[]),i=new h({defaultPackAreaHeight:this.pageSize.y,defaultPackAreaWidth:this.pageSize.x,growLimitHeight:this.pageSizeGrowLimit.y,growLimitWidth:this.pageSizeGrowLimit.x,canGrowPackArea:this.canGrowPageSize,canAddPackAreas:this.canAddPages});function s(e){let t=e.w;e.w=e.h,e.h=t,e.rotated=!e.rotated}console.log("HEAP PACKER",i);let n=[],l=[];if(i.sortBlocksForPacking(a),a.forEach((e=>{i.packBlock(e)?l.push(e):n.push(e)})),a=n,this.allowRotation&&(a.forEach((e=>{s(e)})),n=[],i.sortBlocksForPacking(a),a.forEach((e=>{i.packBlock(e)?l.push(e):n.push(e)})),a=n,a.forEach((e=>{e=s(e)}))),this.allowSplitting){let e=[],t=new d,o=a.reduce(((e,t)=>Math.max(e,t.id)),0)+1,r=!0;for(;r;)a=a.reduce(((a,i)=>{let s=!0;if(i.model.split&&0==i.model.split.ifNeeded&&(s=!1),i.splitCount>=this.maxSplitIterations&&(s=!1),i.model.split&&i.splitCount>=i.model.split.max&&(s=!1),s){let s=.5;i.model.split&&i.model.split.splitAtPct&&(s=i.model.split.splitAtPct);let n=!1;n=i.w>i.h,i.model.split&&"y"==i.model.split.axis&&(n=!0);let l=t.splitModel(i.model,s,n);if(l){let e=this.createModelBlock(l.models.a,o++);e.splitCount=i.splitCount+1;let t=this.createModelBlock(l.models.b,o++);t.splitCount=i.splitCount+1,a.push(e),a.push(t)}else e.push(i)}else e.push(i);return a}),[]),n=[],i.sortBlocksForPacking(a),a.forEach((e=>{i.packBlock(e)?l.push(e):n.push(e)})),this.allowRotation&&(a=n,a.forEach((e=>{s(e)})),n=[],i.sortBlocksForPacking(a),a.forEach((e=>{i.packBlock(e)?l.push(e):n.push(e)}))),n.length>0?(a=n,this.allowRotation&&a.forEach((e=>{s(e)}))):r=!1;n=n.concat(e)}return n=n.concat(t),i.trimEmptyPackAreas(),{packedPages:i.packedAreas().map((e=>{let t={models:{},pages:{},origin:[0,0]};return e.blocks.forEach((e=>{e.rotated&&o().model.rotate(e.model,90);let a=o().measure.modelExtents(e.model).low;o().model.addModel(t,o().model.move(e.model,o().point.subtract([e.x,e.y],a))),e.model.caption&&o().path.move(e.model.caption.anchor,[e.x,e.y])})),t})),unpackedModels:n.map((e=>e.model))}}}var p=a(3125),g=a.n(p),u=a(7152),m=a.n(u);function w(e){return 72*e/25.4}class P{constructor(){this.renderInProgress=!1}getRenderInProgress(){return this.renderInProgress}scaleModelToPDFPPI(e){var t=1;return t=o().units.conversionScale("mm",o().unitType.Inch),t*=72,o().model.scale(o().model.clone(e),t)}renderModelToSVG(e,t){let a={styleSet:{stitch:{stroke:"red",strokeWidth:"1",cssStyle:"stroke-dasharray: 5, 5"},center:{stroke:"green",strokeWidth:"1",cssStyle:"stroke-dasharray: 5, 5, 12, 5"},hint:{stroke:"blue",strokeWidth:"1",cssStyle:"stroke-dasharray: 2, 8"}}};return Object.assign(a,t),e.units=o().unitType.Millimeter,o().exporter.toSVG(e,{useSvgPathOnly:!1,units:"mm",layerOptions:a.styleSet})}renderPageModelsToSVG(e,t){let a=e.map((e=>this.renderModelToSVG(e,t)));return Promise.resolve(a)}modelToPDF(e,t,a,i){i||(i={}),i.base||(i.base={strokeWidth:1,strokeColor:"#000"});let s=this.scaleModelToPDFPPI(t),n=o().measure.modelExtents(s),l=o().exporter.toSVGPathData(s,{origin:[w(a.left),n.high[1]+w(a.top)],byLayers:!0});for(const[t,a]of Object.entries(l)){e.save(),e.path(a);let o=i[t&&""!=t?t:"base"];o||(o=i.base),o&&(o.strokeWidth&&e.lineWidth(o.strokeWidth),o.dashed?e.dash(o.dashed[0],o.dashed[1]):e.undash(),o.strokeColor&&e.stroke(o.strokeColor)),e.restore()}o().model.getAllCaptionsOffset(s).forEach((t=>{console.log("Processing",t),e.text(t.text,n.low[0]+w(a.left)+t.anchor.origin[0],n.high[1]+w(a.top)-t.anchor.origin[1]-(t.anchor.end[1]-t.anchor.origin[1])/2,{baseline:"top"}),console.log("Processing",t,n,w(a.top),n.low[0]+w(a.left)+t.anchor.origin[0],n.high[1]+w(a.top)-t.anchor.origin[1])}))}renderPageModelsToPDF(e,t){let a={styleSet:{base:{strokeWidth:"1",strokeColor:"#000"},center:{strokeWidth:"1",dashed:[10,20],strokeColor:"#0F0"},hint:{strokeWidth:"1",dashed:[5,5],strokeColor:"#00F"},stitch:{strokeWidth:"1",dashed:[2,10],strokeColor:"#F000"},patternJoinLine:{strokeWidth:"1",dashed:[2,10],strokeColor:"#b2c"}},pageMargins:5,units:"mm",layout:"portrait",pageSize:"A4"};if(Object.assign(a,t),!a.pageSize)throw"Page size must be specified for PDF rendering, try A4";a.pageMargins&&"object"!=typeof a.pageMargins&&(a.pageMargins={left:a.pageMargins,right:a.pageMargins,top:a.pageMargins,bottom:a.pageMargins});let i={layout:a.layout,size:"string"==typeof a.pageSize?a.pageSize:[w(a.pageSize.x),w(a.pageSize.y)]};console.log("PDF Setup",i);let o=new(g())({autoFirstPage:!1}),s=o.pipe(m()());return e.forEach((e=>{o.addPage(i),this.modelToPDF(o,e,a.pageMargins,a.styleSet)})),o.end(),new Promise((function(e,t){s.on("finish",(function(){const t=s.toBlob("application/pdf");e(function(e){const t=new FileReader;return t.readAsDataURL(e),new Promise((e=>{t.onloadend=()=>{e(t.result)}}))}(t))})),s.on("error",(function(){t()}))}))}renderCode(e,t,a){this.renderInProgress=!0;let i={format:"SVG",pageSize:{x:1e3,y:1e3},packToPages:!1,canAddPages:!0,canGrowPageSize:!1,pageMargins:10,allowSplitting:!0,allowRotation:!0};Object.assign(i,t),i.pageMargins&&"object"!=typeof i.pageMargins&&(i.pageMargins={left:i.pageMargins,right:i.pageMargins,top:i.pageMargins,bottom:i.pageMargins});let s=function(e,t){let a=new Function("console","makerjs","MakerJs","userParameters","utils",e);a.prototype.models={};let i=new r,s=new a(console,o(),o(),t,i),n=null;if(s)if(n={},s.userParameters&&(n.userParameters=s.userParameters),s.styleSet&&(n.styleSet=s.styleSet),s.log&&(n.log=s.log),s.models&&"legacy"!=s.models){let e=[];e=Object.keys(s.models).map((e=>s.models[e])),n.output=e}else if(s&&Object.keys(s).length>0){let e=[];e=Object.keys(s).filter((e=>!["userParameters","styleSet","models","log","instructions","bom","notes"].includes(e))).map((e=>s[e])),n.output=e}return console,n}(e,Object.assign({},t.userParameters)).output;if(Array.isArray(s)&&s.length>0){let e=new c({pageSize:{x:Math.max(i.pageSize.x-(i.pageMargins.left+i.pageMargins.right),0),y:Math.max(i.pageSize.y-(i.pageMargins.top+i.pageMargins.bottom),0)},pageSizeGrowLimit:{x:-1,y:-1},canAddPages:i.canAddPages,canGrowPageSize:i.canGrowPageSize,allowRotation:i.allowRotation,allowSplitting:i.allowSplitting}).packModels(s);console.log("Packing Result",e);let o=[];"SVG"==i.format?o=this.renderPageModelsToSVG(e.packedPages,i):"PDF"==i.format&&(o=this.renderPageModelsToPDF(e.packedPages,i)),o.then((o=>{Array.isArray(o)||(o=[o]),a({type:"renderResponse",contentType:i.format,renderFor:t.renderFor,successContent:o,errorContent:e.unpackedModels,logMessages:[]})}))}else a({type:"renderResponse",contentType:i.format,renderFor:t.renderFor,successContent:[],errorContent:[],logMessages:[]});this.renderInProgress=!1}reset(){}}self.onmessage=({data:e})=>{let t=new P;"renderRequest"==e.type&&t.renderCode(e.code,e.options,(e=>{self.postMessage(e)}))}},9862:()=>{},964:()=>{}},i={};function o(e){var t=i[e];if(void 0!==t)return t.exports;var s=i[e]={exports:{}};return a[e](s,s.exports,o),s.exports}o.m=a,o.x=()=>{var e=o.O(void 0,[8],(()=>o(7464)));return o.O(e)},e=[],o.O=(t,a,i,s)=>{if(!a){var n=1/0;for(d=0;d<e.length;d++){for(var[a,i,s]=e[d],l=!0,r=0;r<a.length;r++)(!1&s||n>=s)&&Object.keys(o.O).every((e=>o.O[e](a[r])))?a.splice(r--,1):(l=!1,s<n&&(n=s));if(l){e.splice(d--,1);var h=i();void 0!==h&&(t=h)}}return t}s=s||0;for(var d=e.length;d>0&&e[d-1][2]>s;d--)e[d]=e[d-1];e[d]=[a,i,s]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var a in t)o.o(t,a)&&!o.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,a)=>(o.f[a](e,t),t)),[])),o.u=e=>e+".bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={825:1};o.f.i=(t,a)=>{e[t]||importScripts(o.p+o.u(t))};var t=self.webpackChunk=self.webpackChunk||[],a=t.push.bind(t);t.push=t=>{var[i,s,n]=t;for(var l in s)o.o(s,l)&&(o.m[l]=s[l]);for(n&&n(o);i.length;)e[i.pop()]=1;a(t)}})(),t=o.x,o.x=()=>o.e(8).then(t),o.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Qy9CSixHQUFXLENBQ2YsSUFBSUssRUFBVUgsRUFBU0kscUJBQXFCLFVBQ3pDRCxFQUFRamEsU0FBUTRaLEVBQVlLLEVBQVFBLEVBQVFqYSxPQUFTLEdBQUdnYSxLQUs3RCxJQUFLSixFQUFXLE1BQU0sSUFBSU8sTUFBTSx5REFDaENQLEVBQVlBLEVBQVVRLFFBQVEsT0FBUSxJQUFJQSxRQUFRLFFBQVMsSUFBSUEsUUFBUSxZQUFhLEtBQ3BGakQsRUFBb0JrRCxFQUFJVCxHLFNDWHhCLElBQUlVLEVBQWtCLENBQ3JCLElBQUssR0FnQk5uRCxFQUFvQjJCLEVBQUUvWSxFQUFJLENBQUNnWixFQUFTRSxLQUUvQnFCLEVBQWdCdkIsSUFFbEJjLGNBQWMxQyxFQUFvQmtELEVBQUlsRCxFQUFvQitCLEVBQUVILEtBSy9ELElBQUl3QixFQUFxQjNELEtBQW1CLGFBQUlBLEtBQW1CLGNBQUssR0FDcEU0RCxFQUE2QkQsRUFBbUJ6YSxLQUFLMmEsS0FBS0YsR0FDOURBLEVBQW1CemEsS0F2QkNnWCxJQUNuQixJQUFLZSxFQUFVNkMsRUFBYUMsR0FBVzdELEVBQ3ZDLElBQUksSUFBSU0sS0FBWXNELEVBQ2hCdkQsRUFBb0J1QixFQUFFZ0MsRUFBYXRELEtBQ3JDRCxFQUFvQk8sRUFBRU4sR0FBWXNELEVBQVl0RCxJQUloRCxJQURHdUQsR0FBU0EsRUFBUXhELEdBQ2RVLEVBQVM3WCxRQUNkc2EsRUFBZ0J6QyxFQUFTK0MsT0FBUyxFQUNuQ0osRUFBMkIxRCxLLEdsQm5CeEI3WCxFQUFPa1ksRUFBb0J4TixFQUMvQndOLEVBQW9CeE4sRUFBSSxJQUNoQndOLEVBQW9CeE0sRUFBRSxHQUFHd0wsS0FBS2xYLEdtQkRaa1ksRUFBb0J4TixLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9jaHVuayBsb2FkZWQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9zdGFydHVwIGNodW5rIGRlcGVuZGVuY2llcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvcmVuZGVyZW5naW5lL2NvZGVydW5uZXIvZW1wdHltb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvcmVuZGVyZW5naW5lL2NvZGVydW5uZXIvY29kZXJ1bm5lcnV0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9yZW5kZXJlbmdpbmUvaGVhcHBhY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvcmVuZGVyZW5naW5lL21vZGVsc3BsaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3JlbmRlcmVuZ2luZS9tb2RlbHBhY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvcmVuZGVyZW5naW5lL3JlbmRlcmVuZ2luZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvcmVuZGVyZW5naW5lL2NvZGVydW5uZXIvY29kZXJ1bm5lci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvcmVuZGVyZW5naW5lL3JlbmRlcndvcmtlci5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9pbXBvcnRTY3JpcHRzIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgbmV4dCA9IF9fd2VicGFja19yZXF1aXJlX18ueDtcbl9fd2VicGFja19yZXF1aXJlX18ueCA9ICgpID0+IHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZSg4KS50aGVuKG5leHQpO1xufTsiLCJleHBvcnQgY2xhc3MgRW1wdHlNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucGF0aHMgPSB7fTtcbiAgICB0aGlzLm1vZGVscyA9IHt9O1xuICAgIHRoaXMudW5pdHMgPSAnbW0nO1xuICB9XG59XG4iLCJpbXBvcnQgbWFrZXJqcyBmcm9tICdtYWtlcmpzJztcbmltcG9ydCB7RW1wdHlNb2RlbH0gZnJvbSAnLi9lbXB0eW1vZGVsLmpzJztcbi8qKlxuICogQSBhcnJheSBvZiAyIGl0ZW1zIFt4LHldXG4gKiBAdHlwZWRlZiB7QXJyYXkuPG51bWJlcixudW1iZXI+fSBQb2ludFxuICovXG5cblxuXG4vKipcbiAqIENyZWF0ZXMgYSBtb2RlbCBmcm9tIGEgc2VyaWVzIG9mIHBvaW50cywgZmlsbGV0aW5nIGNvcm5lcnMgd2l0aCB0aGUgc3VwcGxpZWQgcmFkaWlcbiAqL1xuY2xhc3MgRmlsbGV0ZWRQYXRoTW9kZWwgZXh0ZW5kcyBFbXB0eU1vZGVse1xuLyoqXG4gKiBDcmVhdGUgdGhlIG1vZGVsXG4gKiBAcGFyYW0ge1BvaW50fSBwYXRoUG9pbnRzIC0gVGhlIHNlcmllcyBvZiBhYnNvbHV0ZSBwb2ludHMgdGhhdCByZXByZXNlbnQgdGhlIGNvcm5lcnMgb2YgdGhlIHNoYXBlXG4gKiBAcGFyYW0ge1BvaW50fSBmaWxsZXRSYWRpaSAtIFRoZSByYWRpaSB0byB1c2UgZm9yIGVhY2ggY29ybmVyIChzdGFydGluZyBhdCAwIGZvciB0aGUgZmlyc3QgMiBwb2ludHMgaW4gUGF0aFBvaW50cyksIGFueSB1bnN1cHBsaWVkIHBvaW50cyB3aWxsIGJlIDAgKG5vIGZpbGxldClcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Nsb3NlZD1mYWxzZV0gLSBDbG9zZSB0aGUgbW9kZWwgdXNpbmcgdGhlIGZpcnN0IGFuZCBsYXN0IHBvaW50c1xuICogQHJldHVybiB7TW9kZWx9IFRoZSBtb2RlbFxuICovXG4gIGNvbnN0cnVjdG9yKHBhdGhQb2ludHMsZmlsbGV0UmFkaWksY2xvc2VkID0gZmFsc2UpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy9pZiBhZGRUb01vZGVsIGlzIG51bGwgdGhlbiBjcmVhdGUgYW4gZW1wdHkgbW9kZWxzXG4gICAgLy9jcmVhdGUgZWFjaCBwYXRoIGFuIGFkZCB0byBhbiBhcnJheVxuICAgIC8vQ29uZGVuc2UgdGhlIHBhdGhQb2ludHMgaW50byBwYWlyc1xuICAgIGxldCBwYXRoUGFpcnMgPSBbXTtcbiAgICBpZiAoY2xvc2VkKSB7XG4gICAgICAvL0FkZCB0aGUgbGFzdCBwb2ludCBiYWNrIGluIGF0IHRoZSBlbmQgdG8gY2xvc2UgdGhlIGxvb3BcbiAgICAgIHBhdGhQb2ludHMucHVzaChwYXRoUG9pbnRzWzBdKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gcGF0aFBvaW50cy5sZW5ndGgtMjsgaSsrICkge1xuICAgICAgcGF0aFBhaXJzLnB1c2goW3BhdGhQb2ludHNbaV0scGF0aFBvaW50c1tpKzFdXSk7XG4gICAgfVxuXG4gICAgbGV0IHBhdGhzID0gcGF0aFBhaXJzLm1hcCgocGF0aFBhaXIpID0+IHtcbiAgICAgIHJldHVybiBuZXcgbWFrZXJqcy5wYXRocy5MaW5lKHBhdGhQYWlyWzBdLHBhdGhQYWlyWzFdKTtcbiAgICB9KTtcblxuICAgIC8vU3RlcCB0aHJvdWdoIHRoZSBmaWxsZXQgcmFkaWkgdG8gYXBwbHkgZmlsbGV0cyB3aGVyZSBuZWVkZWRcbiAgICBsZXQgYXJjcyA9IFtdO1xuICAgIGZpbGxldFJhZGlpLmZvckVhY2goKGZpbGxldFJhZGl1cyxpbmRleCkgPT4ge1xuICAgICAgaWYgKGZpbGxldFJhZGl1cykge1xuICAgICAgICBhcmNzLnB1c2gobWFrZXJqcy5wYXRoLmZpbGxldChcbiAgICAgICAgICBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgcGF0aHNbKCgoaW5kZXgrMSk+PXBhdGhzLmxlbmd0aCk/MDppbmRleCsxKV0sXG4gICAgICAgICAgZmlsbGV0UmFkaXVzXG4gICAgICAgICkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcGF0aHMuY29uY2F0KGFyY3MpLmZvckVhY2goKGFkZFBhdGgsaW5kZXgpID0+IHtcbiAgICAgIG1ha2VyanMucGF0aC5hZGRUbyhhZGRQYXRoLHRoaXMsaW5kZXgpO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1vZGVsIHdpdGggYSBzZXJpZXMgb2YgbGluZXMgYXQgZ2l2ZW4gYXJyYXkgb2YgaW50ZXJ2YWxzXG4gKi9cbmNsYXNzIE9mZnNldExpbmVzQXRJbnRlcnZhbHMgZXh0ZW5kcyBFbXB0eU1vZGVsIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIHNlcmllcyBvZiBsaW5lcyBhdCBnaXZlbiBhcnJheSBvZiBpbnRlcnZhbHNcbiAgICogQHBhcmFtIHtQb2ludH0gYmFzZUxpbmVTdGFydCAtIFN0YXJ0IHBvaW50IG9mIHRoZSBiYXNlIGxpbmVcbiAgICogQHBhcmFtIHtQb2ludH0gYmFzZUxpbmVFbmQgLSBFbmQgcG9pbnQgb2YgdGhlIGJhc2UgbGluZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbaW50ZXJ2YWxzPVtdXSAgLSBBcnJheSBvZiBudW1iZXIgb2Zmc2V0cyBmb3IgdGhlIGxpbmVzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlbGF0aXZlSW50ZXJ2YWxzPXRydWVdIC0gSWYgdHJ1ZSBpbnRlcnZhbHMgYXJlIGludGVycHJldGVkIGFzIHJlbGF0aXZlIHRvIHRoZSBwcmV2aW91cyBpbnRlcnZhbFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xpbmVMYXllcj1udWxsXSAgLSBUaGUgbGF5ZXIgdG8gc2V0IHRoZSBsaW5lcyB0b1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbGlwUG9zaXRpdmVEaXJlY3Rpb249dHJ1ZV0gIC0gRkxpcCB0aGUgZGlyZWN0aW9uIG9mIHBvc2l0aXZlIG9mZnNldHMgcmVsYXRpdmUgdG8gdGhlIGJhc2VsaW5lIChlLmcuIGdvIGxlZnQgb3IgZ28gcmlnaHQgb2YgdGhlIGxpbmUpXG4gICAqIEByZXR1cm4ge01vZGVsfSAtIFRoZSBNb2RlbFxuICAgKi9cbiAgY29uc3RydWN0b3IoYmFzZUxpbmVTdGFydCxiYXNlTGluZUVuZCxpbnRlcnZhbHMgPSBbXSxyZWxhdGl2ZUludGVydmFscyA9IHRydWUsbGluZUxheWVyID0gbnVsbCxmbGlwUG9zaXRpdmVEaXJlY3Rpb24gPSBmYWxzZSkge1xuICAgIHN1cGVyKCk7XG4gICAgLy9DYWxjdWxhdGUgdGhlIGFuZ2xlIG9mIHRoZSBiYXNlTGluZUVuZFxuICAgIGxldCBiYXNlTGluZUFuZ2xlID0gbWFrZXJqcy5hbmdsZS5vZlBvaW50SW5EZWdyZWVzKGJhc2VMaW5lU3RhcnQsYmFzZUxpbmVFbmQpXG4gICAgbGV0IGV4dGVuc2lvbkxpbmVBbmdsZSA9IGJhc2VMaW5lQW5nbGUgKzkwO1xuICAgIGxldCBjdW11bGF0aXZlRXh0ZW5zaW9uID0gMDtcbiAgICBpbnRlcnZhbHMgPSBBcnJheS5pc0FycmF5KGludGVydmFscyk/aW50ZXJ2YWxzOltpbnRlcnZhbHNdO1xuICAgIGludGVydmFscy5mb3JFYWNoKGludGVydmFsRGlzdCA9PiB7XG4gICAgICBsZXQgb2Zmc2V0TGluZTtcbiAgICAgIGlmIChyZWxhdGl2ZUludGVydmFscykge1xuICAgICAgICBjdW11bGF0aXZlRXh0ZW5zaW9uICs9IGludGVydmFsRGlzdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1bXVsYXRpdmVFeHRlbnNpb24gPSBpbnRlcnZhbERpc3Q7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdW11bGF0aXZlRXh0ZW5zaW9uID09IDApIHtcbiAgICAgICAgb2Zmc2V0TGluZSA9IG5ldyBtYWtlcmpzLnBhdGhzLkxpbmUoYmFzZUxpbmVTdGFydCxiYXNlTGluZUVuZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZGlzdFBvaW50ID0gbWFrZXJqcy5wb2ludC5mcm9tUG9sYXIobWFrZXJqcy5hbmdsZS50b1JhZGlhbnMoZXh0ZW5zaW9uTGluZUFuZ2xlKSxjdW11bGF0aXZlRXh0ZW5zaW9uKTtcbiAgICAgICAgb2Zmc2V0TGluZSA9IG5ldyBtYWtlcmpzLnBhdGhzLkxpbmUoXG4gICAgICAgICAgbWFrZXJqcy5wb2ludC5hZGQoYmFzZUxpbmVTdGFydCxkaXN0UG9pbnQpLFxuICAgICAgICAgIG1ha2VyanMucG9pbnQuYWRkKGJhc2VMaW5lRW5kLGRpc3RQb2ludClcbiAgICAgICAgKVxuICAgICAgICAvLyBjb25zb2xlLmxvZygnb2Zmc2V0UG9pbnQnLGRpc3RQb2ludCxvZmZzZXRMaW5lKVxuICAgICAgfVxuXG4gICAgICBpZiAobGluZUxheWVyKSB7XG4gICAgICAgIG1ha2VyanMucGF0aC5sYXllcihvZmZzZXRMaW5lLGxpbmVMYXllcik7XG4gICAgICB9XG5cbiAgICAgIG1ha2VyanMubW9kZWwuYWRkUGF0aCh0aGlzLG9mZnNldExpbmUpO1xuICAgIH0pXG4gIH1cbn1cblxuXG5leHBvcnQgY2xhc3MgQ29kZVJ1bm5lclV0aWxzIHtcblxuXG4vLyBleHBvcnQgdmFyIENvZGVSdW5uZXJVdGlscyA9IGZ1bmN0aW9uKCl7XG4gIEVtcHR5TW9kZWwgPSBFbXB0eU1vZGVsO1xuICBGaWxsZXRlZFBhdGhNb2RlbCA9IEZpbGxldGVkUGF0aE1vZGVsO1xuICBPZmZzZXRMaW5lc0F0SW50ZXJ2YWxzID0gT2Zmc2V0TGluZXNBdEludGVydmFscztcblxuICAvKipcbiAgICAqIFRoZSBGaWxsZXRlZFBhdGhNb2RlbCBjbGFzcyBhY2Nlc3NvclxuICAgICogQHBhcmFtIHtQb2ludH0gZnJvbVBvaW50IC0gVGhlIHBvaW50IHRvIHN0YXJ0IGZyb21cbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBUaGUgbGVuZ3RoIG9mIHRoZSBsaW5lXG4gICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGVJbkRlZ3JlZXMgVGhlIGFic29sdXRlIGFuZ2xlIGluIGRlZ3JlZXMgdG8gZHJhdyB0aGUgbGluZVxuICAgICogQHJldHVybiB7TGluZX0gQSBMaW5lIHBhdGhcbiAgICAqL1xuICBsaW5lRnJvbVBvaW50QXRBbmdsZShmcm9tUG9pbnQsbGVuZ3RoLGFuZ2xlSW5EZWdyZWVzKSB7XG4gICAgbGV0IGFuZ2xlSW5SYWRpYW5zID0gbWFrZXJqcy5hbmdsZS50b1JhZGlhbnMoYW5nbGVJbkRlZ3JlZXMpO1xuICAgIGxldCB0b1BvaW50ID0gbWFrZXJqcy5wb2ludC5hZGQoZnJvbVBvaW50LG1ha2VyanMucG9pbnQuZnJvbVBvbGFyKGFuZ2xlSW5SYWRpYW5zLGxlbmd0aCkpO1xuICAgIHJldHVybiBuZXcgbWFrZXJqcy5wYXRocy5MaW5lKGZyb21Qb2ludCx0b1BvaW50KTtcbiAgfTtcbiAgLyoqXG4gICAgKiBFbmFibGUgYXV0byBzcGxpdHRpbmcgb24gdGhlIG1vZGVsIGlmIG5lZWRlZCBieSB0aGUgbW9kZWwgcGFja2VyIHdoZW4gcmVuZGVyaW5nXG4gICAgKiBAcGFyYW0ge01vZGVsfSBtb2RlbFRvU2V0IC0gVGhlIG1vZGVsIHRvIGVuYWJsZSBzcGxpdHRpbmcgZm9yXG4gICAgKi9cbiAgZW5hYmxlU3BsaXR0aW5nKG1vZGVsVG9TZXQpIHtcbiAgICBtb2RlbFRvU2V0LnNwbGl0ID0ge1xuICAgICAgaWZOZWVkZWQ6IHRydWUsXG4gICAgICBheGlzOiAnYXV0bydcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgICogQ2FwdGlvbiB0aGUgbW9kZWwgd2l0aCB0aGUgc3VwcGxpZWQgdGV4dCB1c2luZyBhIGRpYWdvbmFsIHRocm91Z2ggdGhlIGNlbnRlciwgZWRpdHMgdGhlIG1vZGVsIGluLXBsYWNlXG4gICAgKiBAcGFyYW0ge01vZGVsfSBtb2RlbFRvQ2FwdGlvbiAtIFRoZSBtb2RlbCB0byBjYXB0aW9uXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gY2FwdGlvbiAtIFRoZSB0ZXh0IHRvIHVzZSBmb3IgdGhlIGNhcHRpb25cbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdGV4dEhlaWdodD0xMl0gLSAoSWdub3JlZClcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbG9jYXRpb249J2JvdHRvbSddIC0gKElnbm9yZWQpXG4gICAgKiBAcmV0dXJuIHtNb2RlbH0gLSBUaGUgbW9kZWwgY2FwdGlvbmVkXG4gICAgKi9cbiAgYXV0b0NhcHRpb25Nb2RlbChtb2RlbFRvQ2FwdGlvbixjYXB0aW9uLHRleHRIZWlnaHQgPSAxMixsb2NhdGlvbiA9ICdib3R0b20nKSB7XG4gICAgbGV0IG1vZGVsRXh0ZW50cyA9IG1ha2VyanMubWVhc3VyZS5tb2RlbEV4dGVudHMobW9kZWxUb0NhcHRpb24pO1xuICAgIG1ha2VyanMubW9kZWwuYWRkQ2FwdGlvbihcbiAgICAgIG1vZGVsVG9DYXB0aW9uLFxuICAgICAgY2FwdGlvbixcbiAgICAgIFttb2RlbEV4dGVudHMubG93WzBdLG1vZGVsRXh0ZW50cy5sb3dbMV1dLFxuICAgICAgW21vZGVsRXh0ZW50cy5oaWdoWzBdLG1vZGVsRXh0ZW50cy5oaWdoWzFdXSxcbiAgICApO1xuICAgIHJldHVybiBtb2RlbFRvQ2FwdGlvbjtcbiAgfTtcbiAgLyoqXG4gICAgKiBDbG9uZSBhIG1vZGVsIGFuZCBwbGFjZSBpdCBhdCBhIHJlbGF0aXZlIG9mZnNldCB0byB0aGUgb3JpZ2lhbmxcbiAgICAqIEBwYXJhbSB7TW9kZWx9IG1vZGVsVG9DYXB0aW9uIC0gVGhlIG1vZGVsIHRvIGNvcHlcbiAgICAqIEBwYXJhbSB7UG9pbnR9IFtvZmZzZXQ9WzAsMF1dIC0gdGhlIG9mZnNldCB0byBtb3ZlIHRoZSBtb2RlbCBieVxuICAgICogQHJldHVybiB7TW9kZWx9IC0gVGhlIGNsb25lZCBtb2RlbFxuICAgICovXG4gIGNsb25lQW5kT2Zmc2V0KG1vZGVsVG9DbG9uZSxvZmZzZXQgPSBbMCwwXSkge1xuICAgIHJldHVybiBtYWtlcmpzLm1vZGVsLm1vdmVSZWxhdGl2ZShtYWtlcmpzLm1vZGVsLmNsb25lKG1vZGVsVG9DbG9uZSksb2Zmc2V0KTtcbiAgfTtcbiAgLyoqXG4gICAgKiBQbGFjZSBhIHBvaW50IGEgZGlzdGFuY2UgYW5kIHBvbGFyIGFuZ2xlIGF3YXkgZnJvbSBhIHN0YXJ0aW5nIHBvaW50XG4gICAgKiBAcGFyYW0ge1BvaW50fSBmcm9tUG9pbnQgLSBUaGUgc3RhcnRpbmcgcG9pbnRcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBUaGUgZGlzdGFuY2UgZnJvbSB0aGUgZnJvbVBvaW50XG4gICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGVJbkRlZ3JlZXMgLSBUaGUgYW5nbGUgdG8gcm90YXRlIHRoZSBwb2ludCBieVxuICAgICogQHJldHVybiB7UG9pbnR9IC0gVGhlIG5ldyBwb2ludFxuICAgICovXG4gIHBvaW50RnJvbVBvaW50QXRBbmdsZShmcm9tUG9pbnQsbGVuZ3RoLGFuZ2xlSW5EZWdyZWVzKSB7XG4gICAgbGV0IGFuZ2xlSW5SYWRpYW5zID0gbWFrZXJqcy5hbmdsZS50b1JhZGlhbnMoYW5nbGVJbkRlZ3JlZXMpO1xuICAgIGxldCB0b1BvaW50ID0gbWFrZXJqcy5wb2ludC5hZGQoZnJvbVBvaW50LG1ha2VyanMucG9pbnQuZnJvbVBvbGFyKGFuZ2xlSW5SYWRpYW5zLGxlbmd0aCkpO1xuICAgIHJldHVybiB0b1BvaW50O1xuICB9O1xuICAvKipcbiAgICAqIFBsYWNlIGEgcG9pbnQgYSBnaXZlbiBkaXN0YW5jZSBhbmQgcmVsYXRpdmUgYW5nbGUgZnJvbSBhIGdpdmVuIGxpbmUgKHRoZSBwb2ludCBpcyBwbGFjZWQgcmVsYXRpdmUgdG8gUDEpXG4gICAgKiBAcGFyYW0ge1BvaW50fSBwMSAtIFRoZSBiYXNlIHBvaW50IHRvIG1ha2UgdGhlIG5ldyBwb2ludCByZWxhdGl2ZSB0b1xuICAgICogQHBhcmFtIHtQb2ludH0gcDIgLSBUaGUgc2Vjb25kIHBvaW50IHRoYXQgZGVzY3JpYmVzIHRoZSBvdGhlciBlbmQgb2YgdGhlIGxpbmVcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSAtIFRoZSBkaXN0YW5jZSBmcm9tIHRoZSBwMVxuICAgICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbXNdIC0gUGFyYW1ldGVycyB0byB1c2UsXG4gICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwYXJhbXMuY2xvY2t3aXNlPWZhbHNlXSAtIENsb2Nrd2lzZSBpcyB0aGUgZGlyZWN0aW9uIHRvIG1ha2UgdGhlIGFuZ2xlIHJlbGF0aXZlXG4gICAgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy5hbmdsZT05MF0gLSBhbmdsZSBpcyB0aGUgYW5nbGUgZnJvbSB0aGUgcmVmZXJlbmNlIGxpbmVcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSAgW3BhcmFtcy5pbnNldD0wXSAtIGluc2V0IGlzIGhvdyBmYXIgaW5zZXQgKHRvd2FyZHMgcDIpIHRoZSBiYXNlIHBvaW50IHNob3VsZCBiZVxuICAgICogQHJldHVybiB7UG9pbnR9IC0gVGhlIG5ldyBwb2ludFxuICAgICovXG4gIHBvaW50RnJvbVBvaW50TGluZUF0QW5nbGUocDEscDIsZGlzdGFuY2UscGFyYW1zKSB7XG5cbiAgICBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGNsb2Nrd2lzZTogZmFsc2UsXG4gICAgICBhbmdsZTogOTAsXG4gICAgICBpbnNldDogMFxuICAgIH0scGFyYW1zKTtcbiAgICAvL0dldCB0aGUgYW5nbGUgb2YgdGhlIHBvaW50c1xuICAgIGxldCBiYXNlQW5nbGUgPSBtYWtlcmpzLmFuZ2xlLm9mUG9pbnRJbkRlZ3JlZXMocDEscDIpO1xuXG4gICAgbGV0IHBvaW50QW5nbGUgPSBiYXNlQW5nbGUgLSAocGFyYW1zLmNsb2Nrd2lzZT9wYXJhbXMuYW5nbGU6LXBhcmFtcy5hbmdsZSk7XG4gICAgLy9jYW4ndCB1c2UgdXRpbHMgcG9pbnQgZnJvbSBwb2ludCBhdCBBbmdsZSBhcyB0aGlzIHNldHMgdGhlIGRpc3RhbmNlIG9mIHRoZSBsaW5lIC0gbm90IHRoZSBvZmZzZXRcbiAgICBsZXQgciA9IGRpc3RhbmNlO1xuICAgIGlmIChwYXJhbXMuYW5nbGUgPiAwKSB7XG4gICAgICByID0gZGlzdGFuY2UgLyAoTWF0aC5zaW4oTWF0aC5QSSAqIHBhcmFtcy5hbmdsZSAvIDE4MCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wb2ludEZyb21Qb2ludEF0QW5nbGUocDEscixwb2ludEFuZ2xlKTtcbiAgfTtcbiAgLyoqXG4gICAgKiBSZXR1cm4gYSBwYWlyIG9mIHBvaW50cyB0aGF0IHJlcHJlc2VudCB3aGVyZSBUYWIgb2YgdGhlIHN1cHBsaWVkIHBhcmFtZXRlcnMgY29ybmVycyB3b3VsZCBiZVxuICAgICogQHBhcmFtIHtQb2ludH0gcDEgLSBUaGUgc3RhcnQgcG9pbnQgb2YgdGhlIGxpbmVcbiAgICAqIEBwYXJhbSB7UG9pbnR9IHAyIC0gVGhlIGVuZCBwb2ludCBvZiB0aGUgbGluZVxuICAgICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbXNdIC0gUGFyYW1ldGVycyB0byB1c2UsXG4gICAgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy5kaXN0YW5jZT0wXSAtIFRoZSBvdXRzZXQgZGlzdGFuY2UgZm9yIHRoZSB0YWJcbiAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmFtcy5jbG9ja3dpc2U9ZmFsc2VdIC0gQ2xvY2t3aXNlIGlzIHRoZSBkaXJlY3Rpb24gdG8gbWFrZSB0aGUgYW5nbGUgcmVsYXRpdmVcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW1zLmFuZ2xlPTkwXSAtIEFuZ2xlIG9mIHRoZSB0YWIgc2lkZXNcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW1zLmJhc2VJbnNldD0wXSAtIEluc2V0IG9mIHRoZSB0YWIgZnJvbSB0aGUgZW5kIG9mIHRoZSBsaW5lXG4gICAgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy5iYXNlSW5zZXQyXSAtIElmIHN1cHBsaWVkLCBpcyBpbnNldCBmcm9tIHRoZSBvdGhlciBlbmQgb2YgdGhlIGxpbmUsIG90aGVyd2lzZSBpcyB0aGUgc2FtZSBhcyBfYmFzZUluc2V0X1xuICAgICogQHBhcmFtIHtudW1iZXJ9ICBbcGFyYW1zLmFuZ2xlMl0gLSBJZiBzdXBwbGllZCwgaXMgdGFrZW4gYXMgdGhlIGFuZ2xlIGZvciB0aGUgc2Vjb25kIHRhYiBzaWRlLCBvdGhlcndpc2UgaXMgdGhlIHNhbWUgYXMgX2FuZ2xlX1xuICAgICogQHJldHVybiB7UG9pbnRbXX0gLSAyIFBvaW50cyB0aGF0IGRlc2NyaWJlIHRoZSBhZGRlZCBUYWIgY29ybmVyc1xuICAgICovXG4gIHRhYlBvaW50c0Zyb21Qb2ludExpbmUocDEscDIscGFyYW1zKSB7XG4gICAgcGFyYW1zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBkaXN0YW5jZTogMCxcbiAgICAgIGNsb2Nrd2lzZTogZmFsc2UsXG4gICAgICBhbmdsZTogOTAsXG4gICAgICBiYXNlSW5zZXQ6IDAsXG4gICAgICBiYXNlSW5zZXQyOiBudWxsLFxuICAgICAgYW5nbGUyOiBudWxsXG4gICAgfSxwYXJhbXMpO1xuXG4gIC8vIH0sY2xvY2t3aXNlPWZhbHNlLGFuZ2xlPTkwLGluc2V0PTAsYW5nbGUyID0gbnVsbCkge1xuXG4gICAgaWYgKHBhcmFtcy5kaXN0YW5jZSAhPSAwKSB7XG5cbiAgICAgIGxldCBwaTEgPSBwMS5zbGljZSgpO1xuICAgICAgbGV0IHBpMiA9IHAyLnNsaWNlKCk7XG5cbiAgICAgIGlmIChwYXJhbXMuYmFzZUluc2V0MiA9PSBudWxsKSBwYXJhbXMuYmFzZUluc2V0MiA9IHBhcmFtcy5iYXNlSW5zZXQ7XG5cbiAgICAgIGlmIChwYXJhbXMuYmFzZUluc2V0ID4gMCkge1xuICAgICAgICBwaTEgPSB0aGlzLnBvaW50RnJvbVBvaW50TGluZUF0QW5nbGUocDEscDIscGFyYW1zLmJhc2VJbnNldCx7Y2xvY2t3aXNlOiBwYXJhbXMuY2xvY2t3aXNlLGFuZ2xlOiAwfSk7XG4gICAgICB9XG5cblxuICAgICAgaWYgKHBhcmFtcy5iYXNlSW5zZXQyID4gMCkge1xuICAgICAgICBwaTIgPSB0aGlzLnBvaW50RnJvbVBvaW50TGluZUF0QW5nbGUocDIscDEscGFyYW1zLmJhc2VJbnNldDIse2Nsb2Nrd2lzZTogcGFyYW1zLmNsb2Nrd2lzZSxhbmdsZTogMH0pO1xuICAgICAgfVxuXG4gICAgICBsZXQgdGFiUDEgPSB0aGlzLnBvaW50RnJvbVBvaW50TGluZUF0QW5nbGUocGkxLHBpMixwYXJhbXMuZGlzdGFuY2Use1xuICAgICAgICBjbG9ja3dpc2U6IHBhcmFtcy5jbG9ja3dpc2UsXG4gICAgICAgIGFuZ2xlOiBwYXJhbXMuYW5nbGUsXG4gICAgICAgIGluc2V0OiBwYXJhbXMuaW5zZXRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocGFyYW1zLmFuZ2xlMiA9PSBudWxsKSBwYXJhbXMuYW5nbGUyID0gcGFyYW1zLmFuZ2xlO1xuXG4gICAgICBsZXQgdGFiUDIgPSB0aGlzLnBvaW50RnJvbVBvaW50TGluZUF0QW5nbGUocGkyLHBpMSxwYXJhbXMuZGlzdGFuY2Use1xuICAgICAgICBjbG9ja3dpc2U6IXBhcmFtcy5jbG9ja3dpc2UsXG4gICAgICAgIGFuZ2xlOnBhcmFtcy5hbmdsZTIsXG4gICAgICAgIGluc2V0OnBhcmFtcy5pbnNldFxuICAgICAgfSk7XG5cbiAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChwYXJhbXMuYmFzZUluc2V0ID4gMCkge1xuICAgICAgICByZXN1bHQucHVzaChwaTEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2godGFiUDEpXG4gICAgICByZXN1bHQucHVzaCh0YWJQMilcbiAgICAgIGlmIChwYXJhbXMuYmFzZUluc2V0MiA+IDApIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocGkyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtwMSxwMl07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgICogVHJlYXQgYSBwb2ludGxpbmUgYXMgcmVsYXRpdmUgcG9pbnRzIGZyb20gdGhlIGZpcnN0IHBvaW50IGFuZCBjb252ZXJ0IGVhY2ggcG9pbnQgdG8gYW4gYWJzb2x1dGUgcG9pbnRcbiAgICAqIEBwYXJhbSB7UG9pbnRbXX0gW3BvaW50c10gLSBQb2ludExpbmUgdG8gdXNlXG4gICAgKiBAcmV0dXJuIHtwb2ludFtdfSAtIFRoZSBwb2ludHMgY29udmVydGVkXG4gICAgKi9cbiAgcmVsYXRpdmVQb2ludExpc3RUb0Fic29sdXRlKHBvaW50cykge1xuICAgIGxldCBsYXN0UG9pbnQgPSBbMCwwXTtcbiAgICByZXR1cm4gcG9pbnRzLm1hcCgodGhpc1BvaW50KSA9PiB7XG4gICAgICAgIGxldCBhYnNQb2ludCA9IG1ha2VyanMucG9pbnQuYWRkKGxhc3RQb2ludCx0aGlzUG9pbnQpO1xuICAgICAgICBsYXN0UG9pbnQgPSBhYnNQb2ludDtcbiAgICAgICAgcmV0dXJuIGFic1BvaW50O1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgICAqIENvbnN0cnVjdCBhIHNpbXVsYXRlZCBlbmdsaXNoIHBvaW50IHNoYXBlLCB0byB0aGUgbGVmdCBvZiB0aGUgbGluZSBmcm9tLT50b1xuICAgICogQHBhcmFtIHtQb2ludH0gZnJvbSAtIFRoZSBmcm9tIHBvaW50XG4gICAgKiBAcGFyYW0ge1BvaW50fSB0byAtIFRoZSB0byBwb2ludFxuICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIFBhcmFtZXRlcnMgdG8gdXNlLFxuICAgICogQHBhcmFtIHtudW1iZXJ9IFtwYXJhbXMucmlzZXJQQ1Q9MS4yXSAtIFRoZSBleHRlbnNpb24gb2YgdGhlIHBvaW50IGZyb20gdGhlIGJhc2UgbGluZSBhcyBwZXJjZW50YWdlIChkZWNpbWFsKVxuICAgICogQHJldHVybiB7TW9kZWx9IC0gVGhlIGVuZ2xpc2ggcG9pbnQgYXJjIHBhdGhzXG4gICAgKi9cbiAgZHJhd0VuZ2xpc2hQb2ludChmcm9tLHRvLG9wdGlvbnMpIHtcblxuICAgIGxldCBvcHRzV2l0aERlZmF1bHRzID0gT2JqZWN0LmFzc2lnbih7fSx7XG4gICAgICByaXNlclBDVDogMS4yLFxuICAgIH0sb3B0aW9ucylcblxuICAgIC8vY2FsY3VsYXRlIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHBvaW50c1xuICAgIGxldCByaXNlclBDVCA9IG9wdHNXaXRoRGVmYXVsdHMucmlzZXJQQ1Q7XG4gICAgbGV0IGJhc2VMZW5ndGggPSBtYWtlcmpzLm1lYXN1cmUucG9pbnREaXN0YW5jZShmcm9tLHRvKTtcbiAgICBsZXQgcmlzZXJIZWlnaHQgPSBiYXNlTGVuZ3RoICogcmlzZXJQQ1Q7XG5cbiAgICBsZXQgbGluZUFuZ2xlID0gbWFrZXJqcy5hbmdsZS5vZlBvaW50SW5EZWdyZWVzKGZyb20sdG8pO1xuXG4gICAgbGV0IG9yaWdpbkZyb20gPSB0aGlzLnBvaW50RnJvbVBvaW50QXRBbmdsZShmcm9tLHJpc2VySGVpZ2h0LGxpbmVBbmdsZSk7XG4gICAgbGV0IG9yaWdpblRvID0gdGhpcy5wb2ludEZyb21Qb2ludEF0QW5nbGUodG8scmlzZXJIZWlnaHQsMTgwK2xpbmVBbmdsZSk7XG5cblxuICAgIGxldCBtaWRQb2ludCA9IG1ha2VyanMucG9pbnQuYXZlcmFnZShmcm9tLHRvKTtcblxuICAgIGxldCBjaXJjbGVGcm9tID0gbmV3IG1ha2VyanMucGF0aHMuQ2lyY2xlKG9yaWdpbkZyb20scmlzZXJIZWlnaHQpO1xuICAgIGxldCBjaXJjbGVUbyA9IG5ldyBtYWtlcmpzLnBhdGhzLkNpcmNsZShvcmlnaW5UbyxyaXNlckhlaWdodCk7XG5cbiAgICBsZXQgaW50ZXJzZWN0aW9uID0gbWFrZXJqcy5wYXRoLmludGVyc2VjdGlvbihjaXJjbGVGcm9tLGNpcmNsZVRvKTtcbiAgICBsZXQgaW50ZXJzZWN0aW9uRGlzdGFuY2UgPSBtYWtlcmpzLm1lYXN1cmUucG9pbnREaXN0YW5jZShpbnRlcnNlY3Rpb24uaW50ZXJzZWN0aW9uUG9pbnRzWzBdLGludGVyc2VjdGlvbi5pbnRlcnNlY3Rpb25Qb2ludHNbMV0pO1xuXG4gICAgbGV0IG1pZFBvaW50VGlwID0gdGhpcy5wb2ludEZyb21Qb2ludEF0QW5nbGUobWlkUG9pbnQsaW50ZXJzZWN0aW9uRGlzdGFuY2UvMixsaW5lQW5nbGUrOTApO1xuXG4gICAgbGV0IG1pZFBvaW50QW5nbGVGcm9tID0gbWFrZXJqcy5hbmdsZS5vZlBvaW50SW5EZWdyZWVzKG9yaWdpbkZyb20sbWlkUG9pbnRUaXApO1xuICAgIGxldCBtaWRQb2ludEFuZ2xlVG8gPSBtYWtlcmpzLmFuZ2xlLm9mUG9pbnRJbkRlZ3JlZXMob3JpZ2luVG8sbWlkUG9pbnRUaXApO1xuXG5cbiAgICBsZXQgZW5nbGlzaFBvaW50ID0gbmV3IHRoaXMuRW1wdHlNb2RlbCgpO1xuXG4gICAgbWFrZXJqcy5tb2RlbC5hZGRQYXRoKFxuICAgICAgZW5nbGlzaFBvaW50LFxuICAgICAgbWFrZXJqcy5wYXRoLmxheWVyKG5ldyBtYWtlcmpzLnBhdGhzLkxpbmUobWlkUG9pbnQsbWlkUG9pbnRUaXApLCdzdGl0Y2gnKVxuICAgICk7XG5cblxuICAgIG1ha2VyanMubW9kZWwuYWRkUGF0aChcbiAgICAgIGVuZ2xpc2hQb2ludCxcbiAgICAgIG5ldyBtYWtlcmpzLnBhdGhzLkFyYyhvcmlnaW5Gcm9tLHJpc2VySGVpZ2h0LG1pZFBvaW50QW5nbGVGcm9tLGxpbmVBbmdsZSArIDE4MClcbiAgICApO1xuXG4gICAgbWFrZXJqcy5tb2RlbC5hZGRQYXRoKFxuICAgICAgZW5nbGlzaFBvaW50LFxuICAgICAgbmV3IG1ha2VyanMucGF0aHMuQXJjKG9yaWdpblRvLHJpc2VySGVpZ2h0LGxpbmVBbmdsZSxtaWRQb2ludEFuZ2xlVG8pXG4gICAgKTtcblxuXG5cblxuICAgIHJldHVybiBlbmdsaXNoUG9pbnQ7XG4gIH1cblxuICAvKipcbiAgICAqIEFkZCBhIHRhYiB0byBhIFBvaW50TGluZSB3aXRoIHRoZSBnaXZlbiBwYXJhbWV0ZXJzLCBlZGl0cyB0aGUgUG9pbnRMaW5lIGluLXBsYWNlXG4gICAgKiBAcGFyYW0ge1BvaW50W119IHBvaW50TGluZSAtIFRoZSBwb2ludGxpbmUgdG8gdXNlXG4gICAgKiBAcGFyYW0ge2ludGVnZXJ9IGluZGV4IC0gVGhlIGluZGV4IG9mIHRoZSBsaW5lIGluIHRoZSBwb2ludExpbmUgdG8gYWRkIHRoZSB0YWIgdG9cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1zXSAtIFBhcmFtZXRlcnMgdG8gdXNlLFxuICAgICogQHBhcmFtIHtudW1iZXJ9IFtwYXJhbXMuZGlzdGFuY2U9MF0gLSBUaGUgb3V0c2V0IGRpc3RhbmNlIGZvciB0aGUgdGFiXG4gICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwYXJhbXMuY2xvY2t3aXNlPWZhbHNlXSAtIENsb2Nrd2lzZSBpcyB0aGUgZGlyZWN0aW9uIHRvIG1ha2UgdGhlIGFuZ2xlIHJlbGF0aXZlXG4gICAgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy5hbmdsZT05MF0gLSBBbmdsZSBvZiB0aGUgdGFiIHNpZGVzXG4gICAgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy5iYXNlSW5zZXQ9MF0gLSBJbnNldCBvZiB0aGUgdGFiIGZyb20gdGhlIGVuZCBvZiB0aGUgbGluZVxuICAgICogQHBhcmFtIHtudW1iZXJ9IFtwYXJhbXMuYmFzZUluc2V0Ml0gLSBJZiBzdXBwbGllZCwgaXMgaW5zZXQgZnJvbSB0aGUgb3RoZXIgZW5kIG9mIHRoZSBsaW5lLCBvdGhlcndpc2UgaXMgdGhlIHNhbWUgYXMgX2Jhc2VJbnNldF9cbiAgICAqIEBwYXJhbSB7bnVtYmVyfSAgW3BhcmFtcy5hbmdsZTJdIC0gSWYgc3VwcGxpZWQsIGlzIHRha2VuIGFzIHRoZSBhbmdsZSBmb3IgdGhlIHNlY29uZCB0YWIgc2lkZSwgb3RoZXJ3aXNlIGlzIHRoZSBzYW1lIGFzIF9hbmdsZV9cbiAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gIFtwYXJhbXMuYXV0b1dyYXA9dHJ1ZV0gLSBJZiBpbmRleCBzaG91bGQgd3JhcCBhcm91bmQgdGhlIHBvaW50bGluZSBpZiBpdCBleGNlZWRzIHRoZSBsZW5ndGhcbiAgICAqIEByZXR1cm4ge1BvaW50W119IC0gVGhlIFBvaW50TGluZVxuICAgICovXG4gIGFkZFRhYkF0UG9pbnRMaW5lQXRMaW5lSW5kZXgocG9pbnRMaW5lLGluZGV4LHBhcmFtcykge1xuICAgIHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgZGlzdGFuY2U6IDAsXG4gICAgICBjbG9ja3dpc2U6IGZhbHNlLFxuICAgICAgYW5nbGU6IDkwLFxuICAgICAgYW5nbGUyOiBudWxsLFxuICAgICAgYXV0b1dyYXA6IHRydWVcbiAgICB9LHBhcmFtcyk7XG5cbiAgIGxldCBwMSA9IHBvaW50TGluZVtpbmRleF07XG5cblxuICAgbGV0IHAySW5kZXggPSBpbmRleCsxO1xuICAgaWYgKCgoaW5kZXgrMSkgPiAocG9pbnRMaW5lLmxlbmd0aC0xKSkgJiYgKHBhcmFtcy5hdXRvV3JhcCkpIHtwMkluZGV4ID0gMDt9XG5cbiAgIGxldCBwMiA9IHBvaW50TGluZVtwMkluZGV4XTtcbiAgIGxldCB0YWJQb2ludHMgPSB0aGlzLnRhYlBvaW50c0Zyb21Qb2ludExpbmUocDEscDIscGFyYW1zKTtcbiAgIC8vaW5zZXJ0IGJhY2sgaW50byB0aGUgYXJyYXlcbiAgIHBvaW50TGluZS5zcGxpY2UoaW5kZXgrMSwwLC4uLnRhYlBvaW50cyk7XG4gICByZXR1cm4gcG9pbnRMaW5lO1xuICB9XG4gIC8qKlxuICAgICogRGV0ZXJtaW5lIHRoZSBiZW5kIGFsbG93YW5jZSAoQ3VydmVkIGFyZWEgYmV0d2VlbiB0aGUgZW5kIG9mIHR3byBwYW5lbHMpIHRvIGFjaGlldmUgdGhlIHJlcXVpcmVkIGJlbmRcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1zXSAtIFBhcmFtZXRlcnMgdG8gdXNlLFxuICAgICogQHBhcmFtIHtudW1iZXJ9IFtwYXJhbXMuYW5nbGU9OTBdIC0gQW5nbGUgb2YgdGhlIGJlbmRcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW1zLm1hdGVyaWFsVGhpY2tuZXNzPTFdIC0gVGhpY2tuZXNzIG9mIHRoZSBtYXRlcmlhbCBiZWluZyBiZW50XG4gICAgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy5pbm5lclJhZGl1c10gLSBUaGUgaW5uZXIgcmFkaXVzIG9mIHRoZSBiZW5kIChpbnNpZGUgb2YgdGhlIG1hdGVyaWE7KVxuICAgICogQHBhcmFtIHtudW1iZXJ9IFtwYXJhbXMuaz0wLjVdIC0gQmVuZGluZiBLIEZhY3RvciBvZiB0aGUgbWF0ZXJpYWxcbiAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmFtcy5zaW5nbGVTaWRlZD1mYWxzZV0gLSBPbmx5IHJldHVybiBoYWxmIG9mIHRoZSBiZW5kIGFsbG93YW5jZVxuICAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSBsZW5ndGggb2YgdGhlIGJlbmQgYWxsb3dhbmNlXG4gICAgKi9cbiAgZGV0ZXJtaW5lQmVuZEFsbG93YW5jZShwYXJhbXMpIHtcbiAgICBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGFuZ2xlOiA5MCxcbiAgICAgIG1hdGVyaWFsVGhpY2tuZXNzOiAxLFxuICAgICAgaW5uZXJSYWRpdXM6IG51bGwsXG4gICAgICBrOiAwLjUsXG4gICAgICBzaW5nbGVTaWRlZDogZmFsc2VcbiAgICB9LHBhcmFtcyk7XG5cbiAgICBpZiAocGFyYW1zLmlubmVyUmFkaXVzID09IG51bGwpIHtcbiAgICAgIHBhcmFtcy5pbm5lclJhZGl1cyA9IE1hdGgubWF4KDAuNSwgcGFyYW1zLm1hdGVyaWFsVGhpY2tuZXNzLzQpO1xuICAgIH1cblxuICAgIC8vQmVuZCBhbGxvd2FuY2U6IEJBID0gKGFuZ2xlICogKFBpLzE4MCkpICogKFIgKyAoSyAqIFQpKTtcbiAgICAvL2F1dG8gYXBwcm94OiBLID0gKGxvZyhtaW4oMTAwLChtYXgoMjAqcixUKS9UKSkpKSAvICgyICogbG9nKDEwMCkpXG5cbiAgICBsZXQgYmVuZEFsbG93YW5jZSA9IChwYXJhbXMuYW5nbGUgKiAoTWF0aC5QSSAvIDE4MCkpICogKHBhcmFtcy5pbm5lclJhZGl1cyArIChwYXJhbXMuayAqIHBhcmFtcy5tYXRlcmlhbFRoaWNrbmVzcykpO1xuXG4gICAgaWYgKHBhcmFtcy5zaW5nbGVTaWRlZCkge1xuICAgICAgYmVuZEFsbG93YW5jZSA9IGJlbmRBbGxvd2FuY2UgLzI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJlbmRBbGxvd2FuY2U7XG4gIH1cblxuICBjaG9yZGFsVHJhcGV6b2lkUG9pbnRMaW5lKHBhcmFtcykge1xuICAgIHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgcmFkaXVzRGVsdGE6IDQ1LCAvL3JlcXVpcmVkXG4gICAgICBpbm5lckNob3JkTGVuZ3RoOiAxMCxcbiAgICAgIG91dGVyQ2hvcmRMZW5ndGg6IG51bGwsIC8vQ2FsY3VsYXRlZFxuICAgICAgaW5uZXJSYWRpdXM6IG51bGwsIC8vT3ZlcnJpZGVzIGlubmVyTGVuZ3RoICsgb3V0ZXIgbGVuZ3RoIGlmIHNwZWNpZmllZFxuICAgICAgb3V0ZXJSYWRpdXM6IG51bGwsXG4gICAgICBhbmdsZTogMzAgLy9tdXN0IHNwZWNpZnkgZWl0aGVyIGlubmVyIGFuZ2xlIG9yIChpbm5lciBjaG9yZCBsZW5ndGggb3Igb3V0ZXIgY2hvcmQgbGVuZ3RoKVxuICAgIH0scGFyYW1zKTtcblxuXG4gICAgLy9TSU4gPSBPUFAgLyBIWVBcbiAgICBpZiAoIXBhcmFtcy5pbm5lclJhZGl1cykge1xuICAgICAgcGFyYW1zLmlubmVyUmFkaXVzID0gcGFyYW1zLmlubmVyQ2hvcmRMZW5ndGggLyAoTWF0aC5zaW4oKHBhcmFtcy5hbmdsZS8yKSAqIChNYXRoLlBJIC8gMTgwKSkpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMucmFkaXVzRGVsdGEpIHtcbiAgICAgIHBhcmFtcy5vdXRlclJhZGl1cyA9IHBhcmFtcy5pbm5lclJhZGl1cyArIHBhcmFtcy5yYWRpdXNEZWx0YTtcblxuICAgIH0gZWxzZSBpZiAoIXBhcmFtcy5yYWRpdXNEZWx0YSkge1xuICAgICAgcGFyYW1zLm91dGVyUmFkaXVzID0gcGFyYW1zLm91dGVyQ2hvcmRMZW5ndGggLyAoTWF0aC5zaW4oKHBhcmFtcy5hbmdsZS8yKSAqIChNYXRoLlBJIC8gMTgwKSkpO1xuICAgIH1cblxuICAgIC8vQXN1c21lIGFuZ2xlIHNldCBmb3Igbm93XG4gICAgLy9PZmZzZXQgdGhlIGNvcmUgcG9pbnQgdG8gLSAobWludXMpIHRoZSBpbm5kZXIgcmFkaXVzICB2ZXJ0aWNhbGx5XG4gICAgLy8gbGV0IGFuZ2xlZElubmVyUmFkaXVzUG9pbnQgPSB1dGlscy5wb2ludEZyb21Qb2ludEF0QW5nbGUoWzAsLXBhcmFtcy5pbm5lclJhZGl1c10scGFyYW1zLmlubmVyUmFkaXVzLHBhcmFtcy5hbmdsZSk7XG4gICAgbGV0IHBvaW50TGluZSA9IFtdO1xuICAgIHBvaW50TGluZS5wdXNoKFswLDBdKTtcbiAgICBwb2ludExpbmUucHVzaCh0aGlzLnBvaW50RnJvbVBvaW50QXRBbmdsZShbMCwtcGFyYW1zLmlubmVyUmFkaXVzXSxwYXJhbXMuaW5uZXJSYWRpdXMsOTAtcGFyYW1zLmFuZ2xlKSk7XG4gICAgcG9pbnRMaW5lLnB1c2godGhpcy5wb2ludEZyb21Qb2ludEF0QW5nbGUoWzAsLXBhcmFtcy5pbm5lclJhZGl1c10scGFyYW1zLm91dGVyUmFkaXVzLDkwLXBhcmFtcy5hbmdsZSkpO1xuICAgIHBvaW50TGluZS5wdXNoKFswLHBhcmFtcy5vdXRlclJhZGl1cyAtIHBhcmFtcy5pbm5lclJhZGl1c10pO1xuXG4gICAgcmV0dXJuIHBvaW50TGluZTtcbiAgfVxuICAvKipcbiAgICAqIENyZWF0ZSBhIHBvaW50TGluZSB0aGF0IHJlcHJlc2VudHMgYSBjcmVkaXQgY2FyZCBob2xkZXIgc2xvdFxuICAgICogQHBhcmFtIHtpbnRlZ2VyfSBvdXRlcldpZHRoIC0gT3V0ZXIgd2lkdGggb2YgdGhlIGNhcmRzbG90IChpbmNsdWRpbmcgYW55IHNsaXAgYWxsb3dhbmNlIGFuZCBzdGl0Y2hBbGxvd2FuY2UpLFxuICAgICogQHBhcmFtIHtpbnRlZ2VyfSBvdXRlckhlaWdodCAtIE91dGVyIGhlaWdodCBvZiB0aGUgY2FyZHNsb3QgKGluY2x1ZGluZyBhbnkgc2xpcCBhbGxvd2FuY2UgYW5kIHN0aXRjaEFsbG93YW5jZSksXG4gICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt0U2xvdD1mYWxzZV0gLSBJZiB0aGUgY2FyZCBzbG90IHNob3VsZCBiZSBhIFQgc2xvdCAobWlkZGxlIHNsb3QgaW4gYSBzdGFjayBvZiBjYXJkIHNsb3RzKVxuICAgICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbXNdIC0gUGFyYW1ldGVycyB0byB1c2UsXG4gICAgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy5iYXNlV2lkdGhQQ1Q9Ljc1XSAtIFNldHMgdGhlIGJhc2Ugb2YgdCBzbG90cyB0byBiZSBhIHBvcnRpb24gb2YgdGhlIG92ZXJhbGwgd2lkdGhcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW1zLmJhc2VXaWR0aF0gLSBPdmVycmlkZXMgYmFzZVdpZHRoUENULCBzZXRzIHRoZSBiYXNlIG9mIHQgc2xvdHMgdG8gYmUgYSBzcGVjaWZpYyB3aWR0aFxuICAgICogQHBhcmFtIHtudW1iZXJ9IFtwYXJhbXMuc3RpdGNoQWxsb3dhbmNlPTMuOF0gLSBTZXRzIHRoZSBpbnNldCBvZiB0aGUgdG9wIGxpbmUgKGJlZm9yZS9hZnRlciB0aGUgc2xvcGUvdG9wbGluZSBwb2ludHMpIGFzIGhvcml6b250YWwgYXJlIGFkZGVkXG4gICAgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy5zaWRlSW5zZXRdIC0gSWYgbnVsbCwgPSBzdGl0Y2hBbGxvd2FuY2U7IFNpZGUgaW5zZXQgZm9yIHRoZSBsb3dlciBwYXJ0IG9mIHQgc2xvdHNcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW1zLmNhcmRTdGlja091dFBDVD0uNzVdIC0gU2V0cyB0aGUgaGVpZ3RoIG9mIHRoZSBjYXJkcyBzdGlja2luZyBvdXQgb2YgdGhlIHNsb3QgYXMgYSBwb3J0aW8gb2YgdGhlIG92ZXJhbGwgaGVpZ2h0IG9mIHRoZSBzbG90XG4gICAgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy5jYXJkU3RpY2tPdXRdIC0gT3ZlcnJpZGVzIGNhcmRTdGlja091dFBDVCwgc2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBjYXJkIHN0aWNraW5nIG91dCBvZiB0aGUgc2xvdCB0byBiZSBhIHNwZWNpZmljIHNpemVcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW1zLnNsb3RSaXNlQW1vdW50UENUPS43NV0gLSBTZXQgdGhlIHNsb3QgcmlzZSAoZm9yIHRzbG90cykgdG8gYmUgYSBwb3J0aW9uIG9mIHRoZSBoZWlnaHRcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW1zLnNsb3RSaXNlQW1vdW50XSAtIE92ZXJyaWRlcyBzbG90UmlzZUFtb3VudFBDVCBzbG90IHJpc2UgZm9yIHQgc2xvdHMgdG8gYmUgYSBzcGVjaWZpYyBzaXplXG4gICAgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy50b3BMaW5lU2xvcGVQQ1RdIC0gT3ZlcnJpZGUgdG9wTGluZVNsb3BlUmlzZSBzZXQgdG8gYmUgdG9wTGluZVNsb3BlUENUIG11bHRpcGxpZWQgYnkgdGhlIHdpZHRoXG4gICAgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy50b3BMaW5lU2xvcGVSaXNlPTBdIC0gVW5pdHMgdG8gaGF2ZSB0aGUgY2FyZCB0b3AgcmlzZSBvbiB0aGUgcmlnaHQgaGFuZCBzaWRlXG4gICAgKiBAcGFyYW0ge1BvaW50W119IFtwYXJhbXMudG9wTGluZVBvaW50c10gLVxuICAgICogQHJldHVybiB7UG9pbnRbXX0gLSBBIHBvaW50IGxpbmUgcmVwcmVzZW50aW5nIHRoZSBjcmVkaXQgY2FyZCBob2xkZXIgc2xvdFxuICAgICovXG4gIGNhcmRTbG90UG9pbnRMaW5lKG91dGVyV2lkdGgsIG91dGVySGVpZ2h0LCB0U2xvdCA9IGZhbHNlLCBwYXJhbXM9bnVsbCkge1xuICAgIHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgYmFzZVdpZHRoUENUOiAuNzUsXG4gICAgICBiYXNlV2lkdGg6IG51bGwsIC8vaWYgbnVsbCAtIGNhbGN1bGF0ZSBmcm9tIFBDVCB2YWx1ZVxuICAgICAgc3RpdGNoQWxsb3dhbmNlOiAzLjgsXG4gICAgICBzaWRlSW5zZXQ6IG51bGwsIC8vPSBzaWRlIGFsbG93YW5jZSBpZiA9IG51bGwgLSBzdGl0Y2hBbGxvd2FuY2VcbiAgICAgIGNhcmRTdGlja091dFBDVDogLjIsXG4gICAgICBjYXJkU3RpY2tPdXQ6IG51bGwsIC8vaWYgbnVsbCAtIGNhbGN1bGF0ZSBmb3JtIFBDVCB2YWx1ZVxuICAgICAgc2xvdFJpc2VBbW91bnRQQ1Q6IC4yLFxuICAgICAgc2xvdFJpc2VBbW91bnQ6IG51bGwsIC8vaWYgbnVsbCAtIGNhbGN1bGF0ZSBmcm9tIFBDVCB2YWx1ZVxuICAgICAgdG9wTGluZVNsb3BlUENUOiBudWxsLCAvL2lmICE9MCBhZGQgYSBzbG9wZSB0byB0aGUgdG9wIGxpbmVcbiAgICAgIHRvcExpbmVTbG9wZVJpc2U6IDAsIC8vaWYgc2xvcGUgIT0gbnVsbCB0aGlzIGlzIGlnbm9yZWQgYW5kIHVwZGF0ZWQgdG8gYmUgdGhlIHZhbHVlIG9mIHdpZHRoICogc2xvcGVQQ1RcbiAgICAgIHRvcExpbmVQb2ludHM6IG51bGwsIC8vaWYgIT1udWxsIE92ZXJyaWRlIHRoZSB0b3BsaW5lIHdpdGggY3VzdG9tIHBvaW50cyAoZmlyc3QgYW5kIGxhc3QgcG9pbnRzIHdpbGwgbm90IGJlIG92ZXJyaWRlbilcbiAgICB9LHBhcmFtcyk7XG5cbiAgICAvL0NhbGN1bGF0ZSB0aGUgYWN0dWFsIHZhbHVlcyBmcm9tIGFueSBQQ1QgdmFsdWVzXG4gICAgaWYgKHBhcmFtcy5zaWRlSW5zZXQgPT0gbnVsbCkge1xuICAgICAgcGFyYW1zLnNpZGVJbnNldCA9IHBhcmFtcy5zdGl0Y2hBbGxvd2FuY2U7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5iYXNlV2lkdGggPT0gbnVsbCkge1xuICAgICAgcGFyYW1zLmJhc2VXaWR0aCA9IHBhcmFtcy5iYXNlV2lkdGhQQ1QgKiBvdXRlcldpZHRoO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuY2FyZFN0aWNrT3V0ID09IG51bGwpIHtcbiAgICAgIHBhcmFtcy5jYXJkU3RpY2tPdXQgPSBwYXJhbXMuY2FyZFN0aWNrT3V0UENUICogb3V0ZXJIZWlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5zbG90UmlzZUFtb3VudCA9PSBudWxsKSB7XG4gICAgICBwYXJhbXMuc2xvdFJpc2VBbW91bnQgPSBwYXJhbXMuc2xvdFJpc2VBbW91bnRQQ1QgKiBvdXRlckhlaWdodDtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnRvcExpbmVTbG9wZVBDVCAhPSBudWxsKSB7XG4gICAgICBwYXJhbXMudG9wTGluZVNsb3BlUmlzZSA9IG91dGVySGVpZ2h0ICogcGFyYW1zLnRvcExpbmVTbG9wZVBDVDtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnRvcExpbmVTbG9wZVJpc2UgPT0gbnVsbCkge1xuICAgICAgcGFyYW1zLnRvcExpbmVTbG9wZVJpc2UgPSAwO1xuICAgIH1cblxuICAgIGxldCBwYW5lbEhlaWdodCA9IG91dGVySGVpZ2h0IC0gcGFyYW1zLmNhcmRTdGlja091dDtcbiAgICBsZXQgcGFuZWxXaWR0aCA9IG91dGVyV2lkdGg7XG5cbiAgICBsZXQgcGF0aFBvaW50cyA9IFtdO1xuICAgIHBhdGhQb2ludHMucHVzaChbMCwgcGFuZWxIZWlnaHRdKTtcbiAgICBwYXRoUG9pbnRzLnB1c2goW3BhcmFtcy5zdGl0Y2hBbGxvd2FuY2UsIHBhbmVsSGVpZ2h0XSk7XG4gICAgcGF0aFBvaW50cy5wdXNoKFtwYW5lbFdpZHRoLXBhcmFtcy5zdGl0Y2hBbGxvd2FuY2UsIHBhbmVsSGVpZ2h0ICsgcGFyYW1zLnRvcExpbmVTbG9wZVJpc2VdKTtcbiAgICBwYXRoUG9pbnRzLnB1c2goW3BhbmVsV2lkdGgsIHBhbmVsSGVpZ2h0ICsgcGFyYW1zLnRvcExpbmVTbG9wZVJpc2VdKTtcblxuICAgIGlmICh0U2xvdCkge1xuICAgICAgcGF0aFBvaW50cy5wdXNoKFtwYW5lbFdpZHRoLCBwYW5lbEhlaWdodCArIHBhcmFtcy50b3BMaW5lU2xvcGVSaXNlIC0gcGFyYW1zLnNsb3RSaXNlQW1vdW50XSk7XG4gICAgICBwYXRoUG9pbnRzLnB1c2goW3BhbmVsV2lkdGggLSBwYXJhbXMuc2lkZUluc2V0LCBwYW5lbEhlaWdodCArIHBhcmFtcy50b3BMaW5lU2xvcGVSaXNlIC0gcGFyYW1zLnNsb3RSaXNlQW1vdW50XSk7XG5cbiAgICAgIHBhdGhQb2ludHMucHVzaChbKHBhbmVsV2lkdGggKyBwYXJhbXMuYmFzZVdpZHRoKS8yLCAwXSk7XG4gICAgICBwYXRoUG9pbnRzLnB1c2goWyhwYW5lbFdpZHRoIC0gcGFyYW1zLmJhc2VXaWR0aCkvMiwgMF0pO1xuXG4gICAgICBwYXRoUG9pbnRzLnB1c2goW3BhcmFtcy5zaWRlSW5zZXQsIHBhbmVsSGVpZ2h0IC0gcGFyYW1zLnNsb3RSaXNlQW1vdW50XSk7XG4gICAgICBwYXRoUG9pbnRzLnB1c2goWzAsIHBhbmVsSGVpZ2h0IC0gcGFyYW1zLnNsb3RSaXNlQW1vdW50XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGhQb2ludHMucHVzaChbcGFuZWxXaWR0aCwwXSk7XG4gICAgICBwYXRoUG9pbnRzLnB1c2goWzAsMF0pO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aFBvaW50cztcbiAgfVxuXG5cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYXBQYWNrZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgbGV0IGFwcGxpZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBkZWZhdWx0UGFja0FyZWFIZWlnaHQ6IDEwMDAsXG4gICAgICBkZWZhdWx0UGFja0FyZWFXaWR0aDogMjAwMCxcbiAgICAgIGdyb3dMaW1pdEhlaWdodDogLTEsXG4gICAgICBncm93TGltaXRXaWR0aDogLTEsXG4gICAgICBjYW5Hcm93UGFja0FyZWE6IGZhbHNlLCAvL2Nhbkdyb3dQYWNrQXJlYSBvciBjYW5BZGRQYWNrQXJlYXMgb25seSAxIG11c3QgYmUgZW5hYmxlZCAtIGdyb3cgd2lsbCB0YWtlIHByZWNlZGVuY2VcbiAgICAgIGNhbkFkZFBhY2tBcmVhczogdHJ1ZSxcbiAgICB9LG9wdGlvbnMpO1xuXG4gICAgdGhpcy5kZWZhdWx0UGFja0FyZWFIZWlnaHQgPSBhcHBsaWVkT3B0aW9ucy5kZWZhdWx0UGFja0FyZWFIZWlnaHQ7XG4gICAgdGhpcy5kZWZhdWx0UGFja0FyZWFXaWR0aCA9IGFwcGxpZWRPcHRpb25zLmRlZmF1bHRQYWNrQXJlYVdpZHRoO1xuICAgIHRoaXMuY2FuR3Jvd1BhY2tBcmVhID0gYXBwbGllZE9wdGlvbnMuY2FuR3Jvd1BhY2tBcmVhO1xuICAgIHRoaXMuY2FuQWRkUGFja0FyZWFzID0gYXBwbGllZE9wdGlvbnMuY2FuQWRkUGFja0FyZWFzO1xuXG4gICAgdGhpcy5hdmFpbGFibGVIZWFwID0gW107XG4gICAgdGhpcy5wYWNrQXJlYURlZmluaXRpb25zID0gW107XG4gICAgdGhpcy5wYWNrQXJlYU1heEluZGV4ID0gMDtcbiAgICB0aGlzLnBhY2tlZEJsb2NrcyA9IFtdO1xuXG4gICAgLy9TZXR1cCB0aGUgaW5pdGlhbCBoZWFwXG4gICAgdGhpcy5hZGRQYWNrQXJlYSgpO1xuICB9XG5cbiAgcGFja2VkQXJlYXMoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFja0FyZWFEZWZpbml0aW9ucy5tYXAoKHBhY2tBcmVhKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogcGFja0FyZWEuYSxcbiAgICAgICAgaDogcGFja0FyZWEuaCxcbiAgICAgICAgdzogcGFja0FyZWEudyxcbiAgICAgICAgYmxvY2tzOiB0aGlzLnBhY2tlZEJsb2Nrcy5maWx0ZXIoKGJsb2NrKSA9PiAoYmxvY2suYSA9PSBwYWNrQXJlYS5hKSlcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFkZFBhY2tBcmVhKGFkZFBhY2tBcmVhV2lkdGggPSBudWxsLGFkZFBhY2tBcmVhSGVpZ2h0ID0gbnVsbCkge1xuICAgIGlmICghYWRkUGFja0FyZWFXaWR0aCkge2FkZFBhY2tBcmVhV2lkdGggPSB0aGlzLmRlZmF1bHRQYWNrQXJlYVdpZHRofTtcbiAgICBpZiAoIWFkZFBhY2tBcmVhSGVpZ2h0KSB7YWRkUGFja0FyZWFIZWlnaHQgPSB0aGlzLmRlZmF1bHRQYWNrQXJlYUhlaWdodH07XG4gICAgbGV0IHBhY2tBcmVhSW5kZXggPSArK3RoaXMucGFja0FyZWFNYXhJbmRleDtcbiAgICBsZXQgbmV3UGFja0FyZWEgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIHc6IGFkZFBhY2tBcmVhV2lkdGgsXG4gICAgICBoOiBhZGRQYWNrQXJlYUhlaWdodCxcbiAgICAgIGE6IHBhY2tBcmVhSW5kZXhcbiAgICB9XG5cbiAgICB0aGlzLnBhY2tBcmVhRGVmaW5pdGlvbnMucHVzaChPYmplY3QuYXNzaWduKHt9LG5ld1BhY2tBcmVhKSk7XG4gICAgdGhpcy5hdmFpbGFibGVIZWFwLnB1c2gobmV3UGFja0FyZWEpO1xuICAgIHJldHVybiBuZXdQYWNrQXJlYTtcbiAgfVxuXG4gIGdyb3dQYWNrQXJlYShncm93VG9GaXRXaWR0aCxncm93VG9GaXRIZWlnaHQscGFja0FyZWFJZCA9IC0xKSB7XG4gICAgLy8gY29uc29sZS5sb2coJ0dyb3dpbmcgUGFjayBBcmVhJyxncm93VG9GaXRXaWR0aCxncm93VG9GaXRIZWlnaHQsdGhpcy5hdmFpbGFibGVIZWFwKTtcbiAgICAvL1RPRE86IE1heSBuZWVkIHJld29yayBhcyB0aGlzIHdpbGwgdW5lY2Nlc3NhcmlseSBhZGQgZ3Jvd3RoIGJlY2F1c2UgaXRcbiAgICAvLyAgICAgIGlnbm9yZXMgYW55IGV4aXN0aW5nIGhlYXA7IGUuZy4gaWYgdGhlIGJsb2NrIGFsbW9zdCBmaXQgaW4gdGhlIEhlYXBcbiAgICAvLyAgICAgIGFuZCBvbmx5IG5lZWRzIGEgZmV3IG1vcmUgbW0sIHRoaXMgd2lsbCBzdGlsbCBhZGQgdGhlIGZ1bGwgc3BhY2UgZm9yIHRoZSBibG9ja1xuICAgIC8vRklYOiAgQWRkIGluIHRyaW1taW5nIGRvd24gcGFja0FyZWFzIGJ5IHJlbW92aW5nIG9yIHRyaW1taW5nIHVudXNlZCBoZWFwc1xuICAgIC8vRklYOiAgU2hvdWxkIGZpcnN0IGxvb2sgZm9yIHRoZSBuZWFyZXN0IGVkZ2UgZmFjaW5nIGhlYXAgdGhhdCBtYXRjaGVzIGFuZCB1c2UgdGhhdD9cblxuICAgIC8qKlxuICAgICAqIEZJWE1FOiBBZGRpbmcgdG8gdGhlIGV4aXN0aW5nIHBhY2sgYXJlYXMgZG9lcyBub3QgYWx3YXlzIGFkZCBlbm91Z2ggc3BhY2UgKHNpbmNlIHRoZSBoZWFwIGFyZWFzIG1heSBub3QgYmUgY29udGlndW91cyBoZW5jZSBzdGlsbCBtYXkgbm90IGhhdmUgZW5vdWdoIHNwYWNlLilcbiAgICAgIFRlbXBvcmFyeSBmaXggaXMgdG8ganVzdCBhZGQgaGVhcHMgcmF0aGVyIHRoYW4gZXh0ZW5kaW5nP1xuICAgICAqL1xuXG4gICAgLy9BZGQgdGhlIHNpemUgdG8gdGhlIHBhY2tBcmVhXG4gICAgbGV0IGVkaXRpbmdQYWNrQXJlYSA9IG51bGw7XG4gICAgaWYgKHBhY2tBcmVhSWQgPCAwKSB7XG4gICAgICAvL0lmIG5vdCBzcGVjaWZpZWQganVzdCB1c2UgdGhlIGxhc3Qgb25lXG4gICAgICBlZGl0aW5nUGFja0FyZWEgPSB0aGlzLnBhY2tBcmVhRGVmaW5pdGlvbnNbdGhpcy5wYWNrQXJlYURlZmluaXRpb25zLmxlbmd0aC0xXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRpdGluZ1BhY2tBcmVhID0gdGhpcy5wYWNrQXJlYURlZmluaXRpb25zLmZpbmQoKHBhY2tBcmVhKSA9PiAocGFja0FyZWEuaWQgPT0gcGFja0FyZWFJZCkpO1xuICAgIH1cblxuICAgIC8vRGVjaWRlIG9uIHdoaWNoIHByaW1hcnkgc2lkZSB0byBncm93IHRoZSBwYWNrIGFyZWFcbiAgICAvL0Nob29zZSB0aGUgc2l6ZSB0aGF0IHdpbGwgaW5jcmVhc2UgdGhlIHBhY2sgYXJlYSB0aGUgbGVhc3RcbiAgICBsZXQgZ3Jvd09uV2lkdGhSYXRpbyA9IChlZGl0aW5nUGFja0FyZWEudyArIGdyb3dUb0ZpdFdpZHRoKSAvIChNYXRoLm1heChlZGl0aW5nUGFja0FyZWEuaCxncm93VG9GaXRIZWlnaHQpKTtcbiAgICBsZXQgZ3Jvd09uSGVpZ2h0UmF0aW8gPSAoZWRpdGluZ1BhY2tBcmVhLmggKyBncm93VG9GaXRIZWlnaHQpIC8gKE1hdGgubWF4KGVkaXRpbmdQYWNrQXJlYS53LGdyb3dUb0ZpdFdpZHRoKSk7XG4gICAgLy9DaG9vc2UgdGhlIGxvd2VzdCByYXRpbyBzbyB0aGUgcGFjayBhcmVhIGdyb3dzIGFzIG1vc3RseSBhIHNxdWFyZVxuICAgIC8vRklYTUU6IENoYW5nZSBmcm9tIGxvd2VzdCByYXRpbyB0byBiZSBjbG9zZXN0IHRvIDFcbiAgICBsZXQgZ3Jvd09uV2lkdGggPSAoZWRpdGluZ1BhY2tBcmVhLncgKyBncm93VG9GaXRXaWR0aCkgPCAoZWRpdGluZ1BhY2tBcmVhLmggKyBncm93VG9GaXRIZWlnaHQpIDtcbiAgICBsZXQgYWN0dWFsRmluYWxXaWR0aCA9IChncm93T25XaWR0aD9lZGl0aW5nUGFja0FyZWEudyArIGdyb3dUb0ZpdFdpZHRoOk1hdGgubWF4KGVkaXRpbmdQYWNrQXJlYS53LGdyb3dUb0ZpdFdpZHRoKSk7XG4gICAgbGV0IGFjdHVhbEZpbmFsSGVpZ2h0ID0gKGdyb3dPbldpZHRoP01hdGgubWF4KGVkaXRpbmdQYWNrQXJlYS5oLGdyb3dUb0ZpdEhlaWdodCk6ZWRpdGluZ1BhY2tBcmVhLmggKyBncm93VG9GaXRIZWlnaHQpO1xuXG4gICAgLy9maW5kIHRoZSB4IHNpZGUgZWRnZXNcbiAgICBsZXQgcGFja0FyZWFIZWFwcyA9IHRoaXMuYXZhaWxhYmxlSGVhcC5maWx0ZXIoKGhlYXApID0+IChoZWFwLmEgPT0gZWRpdGluZ1BhY2tBcmVhLmEpKTtcblxuICAgIGxldCByaWdodFNpZGVIZWFwcyA9IHBhY2tBcmVhSGVhcHMuZmlsdGVyKChoZWFwKSA9PiAoaGVhcC54K2hlYXAudyA9PSBlZGl0aW5nUGFja0FyZWEudykpO1xuICAgIGxldCBib3R0b21TaWRlSGVhcHMgPSBwYWNrQXJlYUhlYXBzLmZpbHRlcigoaGVhcCkgPT4gKGhlYXAueStoZWFwLmggPT0gZWRpdGluZ1BhY2tBcmVhLmgpKTtcblxuXG4gICAgbGV0IHJpZ2h0U2lkZURlbHRhID0gYWN0dWFsRmluYWxXaWR0aCAtIGVkaXRpbmdQYWNrQXJlYS53O1xuICAgIGxldCBib3R0b21TaWRlRGVsdGEgPSBhY3R1YWxGaW5hbEhlaWdodCAtIGVkaXRpbmdQYWNrQXJlYS5oO1xuXG5cbiAgICAvLy9JbnN0ZWFkIG9mIGV4dGVuZGVkIGhlYXBzIC0gbmVlZCB0byBhZGQgbmV3IG9uZXNcbiAgICBpZiAoZ3Jvd09uV2lkdGgpIHtcbiAgICAgIC8vUHVzaCB0aGUgaGVhcCBmb3IgdGhlIGJsb2NrIChvbiB0aGUgcmlnaHQpXG4gICAgICB0aGlzLmF2YWlsYWJsZUhlYXAucHVzaCh7XG4gICAgICAgIHM6IDEsXG4gICAgICAgIGE6IGVkaXRpbmdQYWNrQXJlYS5hLFxuICAgICAgICB4OiBlZGl0aW5nUGFja0FyZWEueCArIGVkaXRpbmdQYWNrQXJlYS53LFxuICAgICAgICB5OiBlZGl0aW5nUGFja0FyZWEueSxcbiAgICAgICAgdzogcmlnaHRTaWRlRGVsdGEsXG4gICAgICAgIGg6IGVkaXRpbmdQYWNrQXJlYS5oICsgYm90dG9tU2lkZURlbHRhXG4gICAgICB9KVxuICAgICAgLy9QdXNoIHRoZSByZW1haW5pbmcgaGVhcFxuICAgICAgdGhpcy5hdmFpbGFibGVIZWFwLnB1c2goe1xuICAgICAgICBzOiAyLFxuICAgICAgICBhOiBlZGl0aW5nUGFja0FyZWEuYSxcbiAgICAgICAgeDogZWRpdGluZ1BhY2tBcmVhLngsXG4gICAgICAgIHk6IGVkaXRpbmdQYWNrQXJlYS55ICsgZWRpdGluZ1BhY2tBcmVhLmgsXG4gICAgICAgIHc6IGVkaXRpbmdQYWNrQXJlYS53LFxuICAgICAgICBoOiBib3R0b21TaWRlRGVsdGFcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vUHVzaCB0aGUgaGVhcCBmb3IgdGhlIGJsb2NrIChhdCB0aGUgYm90dG9tKVxuICAgICAgdGhpcy5hdmFpbGFibGVIZWFwLnB1c2goe1xuICAgICAgICBlOiAxLFxuICAgICAgICBhOiBlZGl0aW5nUGFja0FyZWEuYSxcbiAgICAgICAgeDogZWRpdGluZ1BhY2tBcmVhLngsXG4gICAgICAgIHk6IGVkaXRpbmdQYWNrQXJlYS55ICsgZWRpdGluZ1BhY2tBcmVhLmgsXG4gICAgICAgIHc6IGVkaXRpbmdQYWNrQXJlYS53ICsgcmlnaHRTaWRlRGVsdGEsXG4gICAgICAgIGg6IGJvdHRvbVNpZGVEZWx0YVxuICAgICAgfSlcbiAgICAgIC8vUHVzaCB0aGUgcmVtYWluaW5nIGhlYXBcbiAgICAgIHRoaXMuYXZhaWxhYmxlSGVhcC5wdXNoKHtcbiAgICAgICAgZTogMixcbiAgICAgICAgYTogZWRpdGluZ1BhY2tBcmVhLmEsXG4gICAgICAgIHg6IGVkaXRpbmdQYWNrQXJlYS54ICsgZWRpdGluZ1BhY2tBcmVhLncsXG4gICAgICAgIHk6IGVkaXRpbmdQYWNrQXJlYS55LFxuICAgICAgICB3OiByaWdodFNpZGVEZWx0YSxcbiAgICAgICAgaDogZWRpdGluZ1BhY2tBcmVhLmhcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy9yZXNpemUgdGhlIHBhY2sgYXJlYVxuICAgIGVkaXRpbmdQYWNrQXJlYS53ID0gYWN0dWFsRmluYWxXaWR0aDtcbiAgICBlZGl0aW5nUGFja0FyZWEuaCA9IGFjdHVhbEZpbmFsSGVpZ2h0O1xuXG5cbiAgICAvL1RPRE86IFVzZSB0aGUgc3BhY2UgbW9yZSBlZmZpY2llbnRseSBieSByZWNsYWltaW5nIGVtcHR5IGhlYXBzXG4gICAgLy9DQU5DRUxcbiAgICAvLyByaWdodFNpZGVIZWFwcy5mb3JFYWNoKChoZWFwKSA9PiB7XG4gICAgLy8gICBoZWFwLncgPSBoZWFwLncgKyByaWdodFNpZGVEZWx0YTtcbiAgICAvLyB9KTtcbiAgICAvL1xuICAgIC8vIGJvdHRvbVNpZGVIZWFwcy5mb3JFYWNoKChoZWFwKSA9PiB7XG4gICAgLy8gICBoZWFwLmggPSBoZWFwLmggKyBib3R0b21TaWRlRGVsdGE7XG4gICAgLy8gfSk7XG4gICAgLy9DQU5DRUxcblxuXG4gICAgLy8gY29uc29sZS5sb2coJ0dyb3duIFBhY2sgQXJlYScscmlnaHRTaWRlRGVsdGEsYm90dG9tU2lkZURlbHRhLHRoaXMucGFja0FyZWFEZWZpbml0aW9ucyxwYWNrQXJlYUhlYXBzLHJpZ2h0U2lkZUhlYXBzLGJvdHRvbVNpZGVIZWFwcyk7XG4gICAgdGhpcy5zb3J0SGVhcEZvclBhY2tpbmcoKTtcbiAgfVxuXG4gIHNvcnRCbG9ja3NGb3JQYWNraW5nKGJsb2Nrc1RvUGFjaykge1xuICAgIGJsb2Nrc1RvUGFjay5zb3J0KChhLGIpID0+IHtcbiAgICAgIHJldHVybiAoKGIudypiLmgpIC0gKGEudyphLmgpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYmxvY2tzVG9QYWNrO1xuICB9XG5cbiAgc29ydEhlYXBGb3JQYWNraW5nKCkge1xuICAgIC8vU29ydCBzbWFsbGVzdCB0byBsYXJnZXN0IHRvIGVuY291cmFnZSBpdGVtcyB0byBnbyBpbnRvIHRoZSB0aWdodGVzdCBmaXQgKHRvIGdlbmVyYXRlIHRoZSBsZWFzdCBudW1iZXIgb2YgbGVmdC1vdmVyc1xuICAgIHRoaXMuYXZhaWxhYmxlSGVhcC5zb3J0KChhLGIpID0+IHtcbiAgICAgIGxldCBhcmVhQSA9IGEudyphLmg7XG4gICAgICBsZXQgYXJlYUIgPSBiLncqYi5oO1xuICAgICAgcmV0dXJuIGFyZWFBIC0gYXJlYUI7XG4gICAgfSk7XG4gIH1cblxuICBzcGxpdFJlbWFpbmluZ0hlYXAoaGVhcEFyZWEsYmxvY2spIHtcbiAgICBsZXQgc3BsaXRBLCBzcGxpdEI7XG4gICAgaWYgKChoZWFwQXJlYS53IC0gYmxvY2sudykgPj0gKGhlYXBBcmVhLmggLSBibG9jay5oKSkge1xuICAgICAgc3BsaXRBID0ge1xuICAgICAgICB4OiBoZWFwQXJlYS54ICsgYmxvY2sudyxcbiAgICAgICAgeTogaGVhcEFyZWEueSxcbiAgICAgICAgdzogaGVhcEFyZWEudyAtIGJsb2NrLncsXG4gICAgICAgIGg6IGhlYXBBcmVhLmhcbiAgICAgIH1cbiAgICAgIHNwbGl0QiA9IHtcbiAgICAgICAgeDogaGVhcEFyZWEueCxcbiAgICAgICAgeTogaGVhcEFyZWEueSArIGJsb2NrLmgsXG4gICAgICAgIHc6IGJsb2NrLncsXG4gICAgICAgIGg6IGhlYXBBcmVhLmggLSBibG9jay5oXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNwbGl0QSA9IHtcbiAgICAgICAgeDogaGVhcEFyZWEueCxcbiAgICAgICAgeTogaGVhcEFyZWEueSArIGJsb2NrLmgsXG4gICAgICAgIHc6IGhlYXBBcmVhLncsXG4gICAgICAgIGg6IGhlYXBBcmVhLmggLSBibG9jay5oXG4gICAgICB9XG4gICAgICBzcGxpdEIgPSB7XG4gICAgICAgIHg6IGhlYXBBcmVhLnggKyBibG9jay53LFxuICAgICAgICB5OiBoZWFwQXJlYS55LFxuICAgICAgICB3OiBoZWFwQXJlYS53IC0gYmxvY2sudyxcbiAgICAgICAgaDogYmxvY2suaFxuICAgICAgfVxuICAgIH1cblxuICAgIHNwbGl0QS5hID0gaGVhcEFyZWEuYTtcbiAgICBzcGxpdEIuYSA9IGhlYXBBcmVhLmE7XG4gICAgcmV0dXJuIFtzcGxpdEEsc3BsaXRCXTtcbiAgfVxuXG5cblxuICBwYWNrQmxvY2tJbkF2YWlsYWJsZUFyZWFzKGJsb2NrKSB7XG4gICAgbGV0IGJsb2NrUGFja2VkID0gZmFsc2U7XG4gICAgLy90cnkgdG8gZmluZCBhIGhlYXAgYXJlYSB0aGF0IGZpdHMgdGhlIGJsb2NrXG4gICAgbGV0IGZpdHRpbmdIZWFwSW5kZXggPSB0aGlzLmF2YWlsYWJsZUhlYXAuZmluZEluZGV4KChoZWFwQXJlYSkgPT4ge1xuICAgICAgcmV0dXJuICgoaGVhcEFyZWEudyA+PSBibG9jay53KSAmJiAoaGVhcEFyZWEuaCA+PSBibG9jay5oKSlcbiAgICB9KTtcblxuICAgIC8vSWYgcm90YXRpb24gaXMgYWxsb3dlZCAtIHRyeSBhZ2FpbiBsb29raW5nIGZvciB0aGUgaGVhcEluZGV4IC0+IHNpbmNlIHRoZSBoZWFwIGlzIHNvcnRlZCBzbWFsbGVzdCB0byBsYXJnZXN0IHRoZW4gdGhlIGxvd2VyIEluZGV4IHdpbGwgYmUgdGhlXG4gICAgLy9iZXR0ZXIgaGVhcCBzbG90LiAoT1Igc3BlY2lmaWNhbGx5IGlmIGl0IGRvZXNuJ3QgZml0IHJvdGF0ZSBpdCBhbmQgZ28gbG9va2luZylcbiAgICAvL0FsdGhvdWdoIHRoaXMgaXMgd2VpcmQgc2luY2UgdGhlIGFyZWEgZG9lc24ndCBjaGFuZ2VcbiAgICAvL2lmIGl0IGRpZG4ndCBmaXQgLSB0aGVuIHJvdGF0ZSBpdCBhbmQgZ28gc2VhcmNoaW5nIGFnYWluIC0gcmVjb3JkIHRoYXQgaXQgd2FzIHJvdGF0ZWRcblxuICAgIC8vIGNvbnNvbGUubG9nKGJsb2NrLGZpdHRpbmdIZWFwSW5kZXgpO1xuICAgIGlmIChmaXR0aW5nSGVhcEluZGV4ID4gLTEpIHtcbiAgICAgIGxldCBmaXR0aW5nSGVhcCA9IHRoaXMuYXZhaWxhYmxlSGVhcFtmaXR0aW5nSGVhcEluZGV4XTtcbiAgICAgIC8vQmxvY2sgZml0cyBpbiB0aGlzIGhlYXBcbiAgICAgIC8vYXNzaWduIHRoZSBibG9jayBhcyBwYWNrZWQgYW5kIHRoZW4gc3BsaXQgcmVtYWluaW5nIGFyZWEgb2YgdGhlIGhlYXBcbiAgICAgIGxldCBwYWNrZWRCbG9jayA9IHtcbiAgICAgICAgdzogYmxvY2sudyxcbiAgICAgICAgaDogYmxvY2suaCxcbiAgICAgICAgeDogZml0dGluZ0hlYXAueCxcbiAgICAgICAgeTogZml0dGluZ0hlYXAueSxcbiAgICAgICAgYTogZml0dGluZ0hlYXAuYSxcbiAgICAgICAgaWQ6IGJsb2NrLmlkLFxuICAgICAgICByb3RhdGVkOiBibG9jay5yb3RhdGVkLFxuICAgICAgICBtb2RlbDogYmxvY2subW9kZWxcbiAgICAgIH1cbiAgICAgIHRoaXMucGFja2VkQmxvY2tzLnB1c2gocGFja2VkQmxvY2spO1xuXG4gICAgICBsZXQgaGVhcFJlbWFpbmluZyA9IHRoaXMuc3BsaXRSZW1haW5pbmdIZWFwKGZpdHRpbmdIZWFwLGJsb2NrKTtcbiAgICAgIHRoaXMuYXZhaWxhYmxlSGVhcC5zcGxpY2UoZml0dGluZ0hlYXBJbmRleCwxLGhlYXBSZW1haW5pbmdbMF0saGVhcFJlbWFpbmluZ1sxXSk7XG4gICAgICB0aGlzLnNvcnRIZWFwRm9yUGFja2luZygpO1xuICAgICAgYmxvY2tQYWNrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBibG9ja1BhY2tlZDtcbiAgfVxuXG5cblxuICAvL1RPRE86IHRyaW0gZW1wdHkgcGFjayBhcmVhc1xuXG4gIC8vVE9ETzogVHJpbSB6ZXJvIGhlYXAgYXJlYXNcbiAgdHJpbUVtcHR5UGFja0FyZWFzKCkge1xuICAgIHRoaXMucGFja0FyZWFEZWZpbml0aW9ucyA9IHRoaXMucGFja0FyZWFEZWZpbml0aW9ucy5maWx0ZXIoKHBhY2tBcmVhKSA9PiB7XG4gICAgICByZXR1cm4gKHRoaXMucGFja2VkQmxvY2tzLmZpbHRlcigoYmxvY2spID0+IChibG9jay5hID09IHBhY2tBcmVhLmEpKS5sZW5ndGggPiAwKTtcbiAgICB9KTtcblxuICAgIGxldCB2YWxpZFBhY2tBcmVhcyA9IHRoaXMucGFja0FyZWFEZWZpbml0aW9ucy5tYXAoKHBhY2tBcmVhKSA9PiAocGFja0FyZWEuYSkpO1xuICAgIHRoaXMuYXZhaWxhYmxlSGVhcCA9IHRoaXMuYXZhaWxhYmxlSGVhcC5maWx0ZXIoKGhlYXApID0+IHtcbiAgICAgIHJldHVybiAgdmFsaWRQYWNrQXJlYXMuaW5jbHVkZXMoaGVhcC5hKTtcbiAgICB9KTtcbiAgfVxuXG4gIHBhY2tCbG9jayhibG9jaykge1xuXG4gICAgLy9FbnN1cmUgYXRsZWFzdCAxIHBhY2sgYXJlYSBleGlzdHNcbiAgICBpZiAodGhpcy5wYWNrQXJlYURlZmluaXRpb25zLmxlbmd0aCA8IDEpIHtcbiAgICAgIHRoaXMuYWRkUGFja0FyZWEoKTtcbiAgICB9XG5cbiAgICAvL1RyaW0gYW55IGVtcHR5IHBhY2sgYXJlYXMgLVxuICAgIGxldCBibG9ja1BhY2tlZCA9IHRoaXMucGFja0Jsb2NrSW5BdmFpbGFibGVBcmVhcyhibG9jayk7XG4gICAgLypcbiAgICAgIFRvIGdyb3cgcGFjayBhcmVhcyAtXG4gICAgICAgIDEuIGZpbmQgdGhlIGhlYXAgYXJlYXMgdGhhdCBoYXZlIDIgb3IgbGVzcyBuZWlnaGJvdXJzIChpLmUuIG5vdCBzdXJyb3VuZGVkKVxuICAgICAgICAyLiBGaW5kIHdoaWNoIG9mIHRoZXNlIGlzIHRoZSBuZWFyZXN0IGZpdFxuICAgICAgICAzLiBpbmNyZWFzZSB0aGUgc2l6ZSBvZiB0aGUgaGVhcCBhcmVhIHRvIGZpdFxuICAgICAgICA0LiBJbmNyZWFzZSB0aGUgc2l6ZSBvZiBpdHMgcGFyZW50IHBhY2sgYXJlYSB0byBhY2NvdW50IGZvciB0aGUgYWRkZWQgc3BhY2UuXG4gICAgICAgIC0tLS0tLS0tLVxuICAgICAgICBvciBmaW5kIGEgd2F5IHRvIGdyb3cgYSBwYWNrYXJlYSAtIGFuZCBrbm93IGhvdyB0byBncm93IHRoZSBhZmZlY3RlZCBoZWFwIGFyZWFzPyAoYW5kIGFkZCBhbnkgaGVhcCBhcmVhcyBhcyByZXF1aXJlZClcbiAgICAgICAgLS0gRmluZCBoZWFwcyBibG9ja3MgdGhhdCBlbmRlZCBhdCB0aGUgcHJldmlvdXMgbGltaXQgKGUuZy4gaC5YK2guVyA9IFBhY2thcmVhLlcpXG4gICAgICAgIC0tIEluY3JlYXNlIHRoZSBzaXplIG9mIHRoZSBwYWNrIGFyZWEgZGltZW5zaW9uIChQYWNrYXJlYS5XICsgMSlcbiAgICAgICAgLS0gSW5jcmVhc2UgdGhlIHByZXZpb3VzbHkgaWRlbnRpZmllZCBoZWFwIGFyZWFzIGJ5IHRoZSBhbW91bnQgKGgudysxKTtcbiAgICAgICAgLS0gUmVwYWNrXG4gICAgKi9cbiAgICAvL0dyb3cgdGFrZXMgcHJlY2VkZW5jZVxuICAgIGlmICgoIWJsb2NrUGFja2VkKSAmJiAodGhpcy5jYW5Hcm93UGFja0FyZWEpKSB7XG4gICAgICAvLysxIGFsbG93cyBmb3Igd2VpcmQgcm91bmRpbmcgaXNzdWVzXG4gICAgICAvLyBjb25zb2xlLmxvZygnUkVxdWVzdGluZyBHcm93IFBhY2sgYXJlYSBmb3InLGJsb2NrKTtcbiAgICAgIHRoaXMuZ3Jvd1BhY2tBcmVhKGJsb2NrLncrMSxibG9jay5oKzEpO1xuICAgICAgLy90cnkgYWdhaW5cbiAgICAgIGJsb2NrUGFja2VkID0gdGhpcy5wYWNrQmxvY2tJbkF2YWlsYWJsZUFyZWFzKGJsb2NrKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdBZnRlciBHcm93IFBhY2tlZD8nLGJsb2NrUGFja2VkLGJsb2NrKVxuICAgIH1cbiAgICBpZiAoKCFibG9ja1BhY2tlZCkgJiYgKHRoaXMuY2FuQWRkUGFja0FyZWFzKSkge1xuICAgICAgLy9BZGQgYSBuZXcgZGVmYXVsdCBwYWNrIGFyZWEgYW5kIHRyeSBhZ2FpblxuICAgICAgdGhpcy5hZGRQYWNrQXJlYSgpO1xuICAgICAgYmxvY2tQYWNrZWQgPSB0aGlzLnBhY2tCbG9ja0luQXZhaWxhYmxlQXJlYXMoYmxvY2spO1xuICAgICAgLy9kb24ndCBsb29wIGlmIGl0IGRpZG50IGZpdCBhZnRlciBhZGRpbmcgb25lIGFyZWEgLSBpdCB3b24ndCBmaXQuXG4gICAgfVxuXG4gICAgaWYgKCFibG9ja1BhY2tlZCkge1xuICAgICAgLy9UcmltIGVtcHR5IHBhY2sgYXJlYXMgKHJlbW92ZSB0aGUgb25lIHdlIGpzdXQgYWRkZWRcbiAgICAgIC8vTWFrZSBzdXJlIGF0bGVhc3QgMSBpcyBsZWZ0XG4gICAgICB0aGlzLnRyaW1FbXB0eVBhY2tBcmVhcygpO1xuICAgIH1cblxuICAgIHJldHVybiBibG9ja1BhY2tlZDtcbiAgfVxufVxuIiwiaW1wb3J0IG1ha2VyanMgZnJvbSAnbWFrZXJqcyc7XG5pbXBvcnQgeyBFbXB0eU1vZGVsIH0gZnJvbSAnLi9jb2RlcnVubmVyL2VtcHR5bW9kZWwuanMnO1xuXG5leHBvcnQgY2xhc3MgTW9kZWxTcGxpdHRlciAge1xuXG4gIHRyaW1Nb2RlbFRvTGluZShtb2RlbFRvU2xpY2UsbGluZUF0LGtlZXBQb3NpdGl2ZVNpZGUgPSB0cnVlLCBhbG9uZ1hBeGlzID0gdHJ1ZSwgb3ZlcmxhcCA9IDUsIGluY2x1ZGVDdXR0aW5nTGluZUhpbnQgPSB0cnVlLCBhc0Nsb25lID0gdHJ1ZSkge1xuICAgIGNvbnN0IGN1dHRlclBhdGhFeHRlbnNpb24gPSAwLjI7XG4gICAgY29uc3QgY3V0dGVyUGF0aEhpbnRMaW5lRXh0ZW5zaW9uID0gM1xuICAgIC8vQ2xvbmUgb3Igbm90IHRoZSBtb2RlbFxuICAgIGlmIChhc0Nsb25lKSB7XG4gICAgICBtb2RlbFRvU2xpY2UgPSBtYWtlcmpzLm1vZGVsLmNsb25lKG1vZGVsVG9TbGljZSk7XG4gICAgfVxuXG4gICAgbGV0IG1vZGVsU2l6ZSA9IG1ha2VyanMubWVhc3VyZS5tb2RlbEV4dGVudHMobW9kZWxUb1NsaWNlKTtcbiAgICBjb25zb2xlLmxvZygnQ3V0dGluZycpO1xuXG4gICAgLy9DcmVhdGUgdGhlIGN1dHRlciBwaWVjZXNcbiAgICBsZXQgY3V0dGVyUGF0aCwgYm91bmRpbmdCb3g7XG4gICAgbGV0IGJvdW5kaW5nQm94V2lkdGgsIGJvdW5kaW5nQm94T2Zmc2V0WCwgYm91bmRpbmdCb3hIZWlnaHQsIGJvdW5kaW5nQm94T2Zmc2V0WTtcblxuICAgIGlmIChhbG9uZ1hBeGlzKSB7XG4gICAgICBjdXR0ZXJQYXRoID0gbmV3IG1ha2VyanMucGF0aHMuTGluZShcbiAgICAgICAgW21vZGVsU2l6ZS5sb3dbMF0rbGluZUF0KyhrZWVwUG9zaXRpdmVTaWRlPy1vdmVybGFwOm92ZXJsYXApLG1vZGVsU2l6ZS5sb3dbMV0gLSAobW9kZWxTaXplLmhlaWdodCpjdXR0ZXJQYXRoRXh0ZW5zaW9uKV0sXG4gICAgICAgIFttb2RlbFNpemUubG93WzBdK2xpbmVBdCsoa2VlcFBvc2l0aXZlU2lkZT8tb3ZlcmxhcDpvdmVybGFwKSxtb2RlbFNpemUuaGlnaFsxXSArIChtb2RlbFNpemUuaGVpZ2h0KmN1dHRlclBhdGhFeHRlbnNpb24pXVxuICAgICAgKTtcblxuICAgICAgYm91bmRpbmdCb3hXaWR0aCA9IChrZWVwUG9zaXRpdmVTaWRlPyhtb2RlbFNpemUud2lkdGgtbGluZUF0KToobGluZUF0KSkgKyAob3ZlcmxhcCoyKTtcbiAgICAgIGJvdW5kaW5nQm94T2Zmc2V0WCA9IChrZWVwUG9zaXRpdmVTaWRlPyhtb2RlbFNpemUubG93WzBdK2xpbmVBdC1vdmVybGFwKToobW9kZWxTaXplLmxvd1swXS1vdmVybGFwKSk7XG4gICAgICBib3VuZGluZ0JveEhlaWdodCA9IG1vZGVsU2l6ZS5oZWlnaHQgKyAob3ZlcmxhcCoyKTtcbiAgICAgIGJvdW5kaW5nQm94T2Zmc2V0WSA9IG1vZGVsU2l6ZS5sb3dbMV0gLSBvdmVybGFwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXR0ZXJQYXRoID0gbmV3IG1ha2VyanMucGF0aHMuTGluZShcbiAgICAgICAgW21vZGVsU2l6ZS5sb3dbMF0gLSAobW9kZWxTaXplLndpZHRoKmN1dHRlclBhdGhFeHRlbnNpb24pLCBtb2RlbFNpemUubG93WzFdK2xpbmVBdCsoa2VlcFBvc2l0aXZlU2lkZT8tb3ZlcmxhcDpvdmVybGFwKV0sXG4gICAgICAgIFttb2RlbFNpemUuaGlnaFswXSArIChtb2RlbFNpemUud2lkdGgqY3V0dGVyUGF0aEV4dGVuc2lvbiksIG1vZGVsU2l6ZS5sb3dbMV0rbGluZUF0KyhrZWVwUG9zaXRpdmVTaWRlPy1vdmVybGFwOm92ZXJsYXApXVxuICAgICAgKTtcblxuICAgICAgYm91bmRpbmdCb3hXaWR0aCA9IG1vZGVsU2l6ZS53aWR0aCArIChvdmVybGFwKjIpO1xuICAgICAgYm91bmRpbmdCb3hPZmZzZXRYID0gbW9kZWxTaXplLmxvd1swXSAtIG92ZXJsYXA7XG4gICAgICBib3VuZGluZ0JveEhlaWdodCA9IChrZWVwUG9zaXRpdmVTaWRlPyhtb2RlbFNpemUuaGVpZ2h0LWxpbmVBdCk6KGxpbmVBdCkpICsgKG92ZXJsYXAqMik7XG4gICAgICBib3VuZGluZ0JveE9mZnNldFkgPSAoa2VlcFBvc2l0aXZlU2lkZT8obW9kZWxTaXplLmxvd1swXStsaW5lQXQtb3ZlcmxhcCk6KG1vZGVsU2l6ZS5sb3dbMF0tb3ZlcmxhcCkpO1xuICAgIH1cbiAgICBib3VuZGluZ0JveCA9IG1ha2VyanMubW9kZWwubW92ZShcbiAgICAgIG5ldyBtYWtlcmpzLm1vZGVscy5SZWN0YW5nbGUoYm91bmRpbmdCb3hXaWR0aCxib3VuZGluZ0JveEhlaWdodCksXG4gICAgICBbYm91bmRpbmdCb3hPZmZzZXRYLGJvdW5kaW5nQm94T2Zmc2V0WV1cbiAgICApO1xuICAgIGNvbnNvbGUubG9nKG1vZGVsU2l6ZSxib3VuZGluZ0JveE9mZnNldFgsYm91bmRpbmdCb3hXaWR0aCxib3VuZGluZ0JveE9mZnNldFksYm91bmRpbmdCb3gsYm91bmRpbmdCb3hIZWlnaHQpO1xuXG4gICAgLy9Kc3V0IGJyZWFrIHRoZSBwYXRocyBhcGFydCB0byBzdGFydCB3aXRoXG4gICAgbWFrZXJqcy5tb2RlbC53YWxrKG1vZGVsVG9TbGljZSx7XG4gICAgICBvblBhdGg6IChjb250ZXh0KSA9PiB7XG4gICAgICAgIGxldCBwYXRoSW50ZXJzZWN0aW9uID0gbWFrZXJqcy5wYXRoLmludGVyc2VjdGlvbihjb250ZXh0LnBhdGhDb250ZXh0LGN1dHRlclBhdGgpO1xuICAgICAgICBpZiAocGF0aEludGVyc2VjdGlvbil7XG4gICAgICAgICAgcGF0aEludGVyc2VjdGlvbi5pbnRlcnNlY3Rpb25Qb2ludHMuZm9yRWFjaChpbnRlcnNlY3Rpb25Qb2ludCA9PiB7XG4gICAgICAgICAgICBsZXQgYWRkUGF0aCA9IG1ha2VyanMucGF0aC5icmVha0F0UG9pbnQoY29udGV4dC5wYXRoQ29udGV4dCxpbnRlcnNlY3Rpb25Qb2ludCk7XG4gICAgICAgICAgICBtYWtlcmpzLm1vZGVsLmFkZFBhdGgoY29udGV4dC5tb2RlbENvbnRleHQsYWRkUGF0aCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyAvL05vdyB3YWxrIGFnYWluIHRyaW1taW5nIGl0ZW1zIHRoYXQgYXJlbid0IGluIHRoZSBib3VuZGluZyBib3hcbiAgICBtYWtlcmpzLm1vZGVsLndhbGsobW9kZWxUb1NsaWNlLHtcbiAgICAgIG9uUGF0aDogKGNvbnRleHQpID0+IHtcbiAgICAgICAgaWYgKCFtYWtlcmpzLm1vZGVsLmlzUGF0aEluc2lkZU1vZGVsKGNvbnRleHQucGF0aENvbnRleHQsYm91bmRpbmdCb3gsY29udGV4dC5vZmZzZXQpKSB7XG4gICAgICAgICAgZGVsZXRlIGNvbnRleHQubW9kZWxDb250ZXh0LnBhdGhzW2NvbnRleHQucGF0aElkXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvL0FkZCB0aGUgY3V0IGxpbmUgaGludCBsaW5lIC0gaWdub3Jpbmcgb3ZlcmxhcFxuICAgIGlmIChpbmNsdWRlQ3V0dGluZ0xpbmVIaW50KSB7XG4gICAgICBsZXQgY3V0dGluZ0xpbmVIaW50O1xuICAgICAgaWYgKGFsb25nWEF4aXMpIHtcbiAgICAgICAgY3V0dGluZ0xpbmVIaW50ID0gbmV3IG1ha2VyanMucGF0aHMuTGluZShcbiAgICAgICAgICBbbW9kZWxTaXplLmxvd1swXStsaW5lQXQsbW9kZWxTaXplLmxvd1sxXSAtIChjdXR0ZXJQYXRoSGludExpbmVFeHRlbnNpb24pXSxcbiAgICAgICAgICBbbW9kZWxTaXplLmxvd1swXStsaW5lQXQsbW9kZWxTaXplLmhpZ2hbMV0gKyAoY3V0dGVyUGF0aEhpbnRMaW5lRXh0ZW5zaW9uKV1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1dHRpbmdMaW5lSGludCA9IG5ldyBtYWtlcmpzLnBhdGhzLkxpbmUoXG4gICAgICAgICAgW21vZGVsU2l6ZS5sb3dbMF0gLSAoY3V0dGVyUGF0aEhpbnRMaW5lRXh0ZW5zaW9uKSwgbW9kZWxTaXplLmxvd1sxXStsaW5lQXRdLFxuICAgICAgICAgIFttb2RlbFNpemUuaGlnaFswXSArIChjdXR0ZXJQYXRoSGludExpbmVFeHRlbnNpb24pLCBtb2RlbFNpemUubG93WzFdK2xpbmVBdF1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIG1ha2VyanMucGF0aC5sYXllcihjdXR0aW5nTGluZUhpbnQsJ3BhdHRlcm5Kb2luTGluZScpO1xuICAgICAgbWFrZXJqcy5tb2RlbC5hZGRQYXRoKG1vZGVsVG9TbGljZSxjdXR0aW5nTGluZUhpbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBtb2RlbFRvU2xpY2VcbiAgfVxuXG5cbiAgc3BsaXRNb2RlbChtb2RlbFRvU3BsaXQsc3BsaXRBdFBjdCA9IC41LGFsb25nWEF4aXMgPSB0cnVlKSB7XG4gICAgbGV0IG1vZGVsRXh0ZW50cyA9IG1ha2VyanMubWVhc3VyZS5tb2RlbEV4dGVudHMobW9kZWxUb1NwbGl0KTtcbiAgICBsZXQgc3BsaXRBdERpc3QgPSBhbG9uZ1hBeGlzPyhzcGxpdEF0UGN0ICogIG1vZGVsRXh0ZW50cy53aWR0aCk6KHNwbGl0QXRQY3QgKiAgbW9kZWxFeHRlbnRzLmhlaWdodCk7XG4gICAgLy8gY29uc29sZS5sb2coJ3NwbGl0dGluZyBhdCcsc3BsaXRBdERpc3QpO1xuICAgIGxldCBwb3NpdGl2ZVNpZGUgPSB0aGlzLnRyaW1Nb2RlbFRvTGluZShtb2RlbFRvU3BsaXQsc3BsaXRBdERpc3QsdHJ1ZSxhbG9uZ1hBeGlzKTtcbiAgICBsZXQgbmVnYXRpdmVTaWRlID0gdGhpcy50cmltTW9kZWxUb0xpbmUobW9kZWxUb1NwbGl0LHNwbGl0QXREaXN0LGZhbHNlLGFsb25nWEF4aXMpO1xuICAgIHJldHVybiB7XG4gICAgICBtb2RlbHM6IHtcbiAgICAgICAgYTogcG9zaXRpdmVTaWRlLFxuICAgICAgICBiOiBuZWdhdGl2ZVNpZGVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuIiwiaW1wb3J0IEhlYXBQYWNrZXIgZnJvbSAnLi9oZWFwcGFja2VyLmpzJztcbmltcG9ydCBtYWtlcmpzIGZyb20gJ21ha2VyanMnO1xuaW1wb3J0IHsgTW9kZWxTcGxpdHRlciB9IGZyb20gJy4vbW9kZWxzcGxpdHRlci5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNb2RlbFBhY2tlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcblxuICAgIGxldCBwYWNraW5nT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgcGFnZVNpemU6IHt4OiAxMDAwLCB5OiAxMDAwfSxcbiAgICAgIHBhZ2VTaXplR3Jvd0xpbWl0OiB7eDogLTEsIHk6IC0xfSxcbiAgICAgIGNhbkFkZFBhZ2VzOiB0cnVlLFxuICAgICAgY2FuR3Jvd1BhZ2VTaXplOiBmYWxzZSxcbiAgICAgIGFsbG93Um90YXRpb246IHRydWUsXG4gICAgICBhbGxvd1NwbGl0dGluZzogdHJ1ZSxcbiAgICAgIG1heFNwbGl0SXRlcmF0aW9uczogMyxcbiAgICB9LG9wdGlvbnMpO1xuXG4gICAgdGhpcy5wYWdlU2l6ZSA9IHBhY2tpbmdPcHRpb25zLnBhZ2VTaXplO1xuICAgIHRoaXMucGFnZVNpemVHcm93TGltaXQgPSBwYWNraW5nT3B0aW9ucy5wYWdlU2l6ZUdyb3dMaW1pdDtcbiAgICB0aGlzLmNhbkFkZFBhZ2VzID0gcGFja2luZ09wdGlvbnMuY2FuQWRkUGFnZXM7XG4gICAgdGhpcy5jYW5Hcm93UGFnZVNpemUgPSBwYWNraW5nT3B0aW9ucy5jYW5Hcm93UGFnZVNpemU7XG4gICAgdGhpcy5hbGxvd1JvdGF0aW9uID0gcGFja2luZ09wdGlvbnMuYWxsb3dSb3RhdGlvbjtcbiAgICB0aGlzLmFsbG93U3BsaXR0aW5nID0gcGFja2luZ09wdGlvbnMuYWxsb3dTcGxpdHRpbmc7XG4gICAgdGhpcy5tYXhTcGxpdEl0ZXJhdGlvbnMgPSBwYWNraW5nT3B0aW9ucy5tYXhTcGxpdEl0ZXJhdGlvbnM7XG4gIH1cblxuICBjcmVhdGVNb2RlbEJsb2NrKG1vZGVsLGJsb2NraWQpIHtcbiAgICBsZXQgbW9kZWxFeHRlbnRzID0gbWFrZXJqcy5tZWFzdXJlLm1vZGVsRXh0ZW50cyhtb2RlbCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBibG9ja2lkLFxuICAgICAgbW9kZWw6IG1vZGVsLFxuICAgICAgdzogbW9kZWxFeHRlbnRzLndpZHRoLFxuICAgICAgaDogbW9kZWxFeHRlbnRzLmhlaWdodCxcbiAgICAgIHJvdGF0ZWQ6IGZhbHNlLFxuICAgICAgc3BsaXRDb3VudDogMCxcbiAgICB9XG4gIH1cblxuXG4gIHBhY2tNb2RlbHMobW9kZWxzKSB7XG4gICAgLy9Bc3NpZ24gdGhlIG1vZGVscyB0cmFja2FibGUgSURzXG4gICAgLy9DYWxjdWxhdGUgdGhlIHcvaCB2YWx1ZXMgZm9yIHRoZSBibG9jayAod2hpY2ggaXMgdGhlIG91dGVyIHdpZHRoL2hlaWdodCBvZiB0aGUgYmxvY2spXG5cbiAgICAvL1ZhbGlkYXRlIHRoZSBtb2RlbCBibG9ja3NcbiAgICBsZXQgZmFpbGluZ01vZGVscyA9IFtdO1xuXG4gICAgbGV0IGJsb2Nrc1RvUGFjayA9IG1vZGVscy5yZWR1Y2UoKGFjY3VtdWxhdG9yLG1vZGVsLGluZGV4KSA9PiB7XG4gICAgICBsZXQgbW9kZWxCbG9jayA9IHRoaXMuY3JlYXRlTW9kZWxCbG9jayhtb2RlbCxpbmRleCk7XG4gICAgICBpZiAoKCFtb2RlbEJsb2NrLncpIHx8ICghbW9kZWxCbG9jay5oKSkge1xuICAgICAgICBmYWlsaW5nTW9kZWxzLnB1c2gobW9kZWxCbG9jayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY2N1bXVsYXRvci5wdXNoKG1vZGVsQmxvY2spO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yXG4gICAgfSxbXSk7XG5cblxuXG5cblxuICAgIC8vTm93IHRyeSBhc3NpZ25pbmcgdGhlIG1vZGVscyB0byBoZWFwc1xuICAgIGxldCBoZWFwUGFja2VyID0gbmV3IEhlYXBQYWNrZXIoe1xuICAgICAgZGVmYXVsdFBhY2tBcmVhSGVpZ2h0OiB0aGlzLnBhZ2VTaXplLnksXG4gICAgICBkZWZhdWx0UGFja0FyZWFXaWR0aDogdGhpcy5wYWdlU2l6ZS54LFxuICAgICAgZ3Jvd0xpbWl0SGVpZ2h0OiB0aGlzLnBhZ2VTaXplR3Jvd0xpbWl0LnksXG4gICAgICBncm93TGltaXRXaWR0aDogdGhpcy5wYWdlU2l6ZUdyb3dMaW1pdC54LFxuICAgICAgY2FuR3Jvd1BhY2tBcmVhOiB0aGlzLmNhbkdyb3dQYWdlU2l6ZSxcbiAgICAgIGNhbkFkZFBhY2tBcmVhczogdGhpcy5jYW5BZGRQYWdlcyxcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKCdIRUFQIFBBQ0tFUicsaGVhcFBhY2tlcilcbiAgICAvL2hhbmR5IGZ1bmN0aW9uIGZvciByb3RhdGluZyBibG9ja3NcbiAgICBmdW5jdGlvbiByb3RhdGVCbG9jayhibG9jaykge1xuICAgICAgbGV0IHRlbXBXID0gYmxvY2sudztcbiAgICAgIGJsb2NrLncgPSBibG9jay5oO1xuICAgICAgYmxvY2suaCA9IHRlbXBXO1xuICAgICAgYmxvY2sucm90YXRlZCA9ICFibG9jay5yb3RhdGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZJUlNUIFBBU1M6IEp1c3QgdHJ5IHRvIGZpdCB0aGUgbW9kZWxzIGFzIGlzXG4gICAgICovXG4gICAgbGV0IHVucGFja2VkQmxvY2tzID0gW107XG4gICAgbGV0IHBhY2tlZEJsb2NrcyA9IFtdO1xuICAgIGhlYXBQYWNrZXIuc29ydEJsb2Nrc0ZvclBhY2tpbmcoYmxvY2tzVG9QYWNrKTtcbiAgICBibG9ja3NUb1BhY2suZm9yRWFjaCgoYmxvY2spID0+IHtcbiAgICAgIGxldCBibG9ja0hhc1BhY2tlZCA9IGhlYXBQYWNrZXIucGFja0Jsb2NrKGJsb2NrKTtcbiAgICAgIGlmIChibG9ja0hhc1BhY2tlZCkge1xuICAgICAgICBwYWNrZWRCbG9ja3MucHVzaChibG9jayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1bnBhY2tlZEJsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvL1Jlc2V0IHRoZSByZWplY3RzIGludG8gdGhlIGJsb2NrcyB0byBwYWNrIGJhZyBmb3IgdGhlIG5leHQgcnVuXG4gICAgYmxvY2tzVG9QYWNrID0gdW5wYWNrZWRCbG9ja3M7XG5cbiAgICBpZiAodGhpcy5hbGxvd1JvdGF0aW9uKSB7XG4gICAgICAvKipcbiAgICAgICAqIFJPVEFURSBQQVNTOiBUcnkgdG8gZml0IHdob2xlIG1vZGVscyB3aXRoIHJvdGF0aW9uXG4gICAgICAgKi9cbiAgICAgIC8vTm93IHJvdGF0ZSBhbnkgb2YgdGhlIHJlamVjdHMgYW5kIHRyeSBwYWNraW5nIHRoZW0gYWdhaW5cblxuICAgICAgYmxvY2tzVG9QYWNrLmZvckVhY2goKGJsb2NrKSA9PiB7XG4gICAgICAgIHJvdGF0ZUJsb2NrKGJsb2NrKTtcbiAgICAgIH0pO1xuXG4gICAgICB1bnBhY2tlZEJsb2NrcyA9IFtdO1xuICAgICAgaGVhcFBhY2tlci5zb3J0QmxvY2tzRm9yUGFja2luZyhibG9ja3NUb1BhY2spO1xuICAgICAgYmxvY2tzVG9QYWNrLmZvckVhY2goKGJsb2NrKSA9PiB7XG4gICAgICAgIGxldCBibG9ja0hhc1BhY2tlZCA9IGhlYXBQYWNrZXIucGFja0Jsb2NrKGJsb2NrKTtcbiAgICAgICAgaWYgKGJsb2NrSGFzUGFja2VkKSB7XG4gICAgICAgICAgcGFja2VkQmxvY2tzLnB1c2goYmxvY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVucGFja2VkQmxvY2tzLnB1c2goYmxvY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vTm93IHVucm90YXRlIHRoZSByZWplY3RzIGZvciB0aGUgbmV4dCBzdGVwXG4gICAgICBibG9ja3NUb1BhY2sgPSB1bnBhY2tlZEJsb2NrcztcbiAgICAgIGJsb2Nrc1RvUGFjay5mb3JFYWNoKChibG9jaykgPT4ge1xuICAgICAgICBibG9jayA9IHJvdGF0ZUJsb2NrKGJsb2NrKTtcbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgaWYgKHRoaXMuYWxsb3dTcGxpdHRpbmcpIHtcbiAgICAgIC8qKlxuICAgICAgICogU1BMSVQgLSB0aGVuIFRyeSBhZ2FpblxuICAgICAgICovXG4gICAgICAvL05vdyBzcGxpdCBhbnkgaXRlbXMgdGhhdCBjYW4gYmUgc3BsaXQgYW5kIHRyeSBwYWNraW5nIHRoZXNlXG4gICAgICBsZXQgc2tpcFNwbGl0dGluZ0Jsb2NrcyA9IFtdO1xuICAgICAgbGV0IG1vZGVsU3BsaXR0ZXIgPSBuZXcgTW9kZWxTcGxpdHRlcigpO1xuICAgICAgLy9UcmFjayBhIHVuaXF1ZSBpbmRleCBmb3IgdGhlIG5ldyBibG9ja3Mgd2UgYWRkL3NwbGl0IG9mZlxuICAgICAgbGV0IGN1cnJlbnRCbG9ja0luZGV4ID0gYmxvY2tzVG9QYWNrLnJlZHVjZSgoYWNjdW11bGF0b3IsYmxvY2spID0+IHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGFjY3VtdWxhdG9yLGJsb2NrLmlkKTtcbiAgICAgIH0sMCkgKyAxO1xuXG4gICAgICBsZXQgY29udGludWVTcGxpdHRpbmcgPSB0cnVlO1xuXG4gICAgICB3aGlsZSAoY29udGludWVTcGxpdHRpbmcpIHtcbiAgICAgICAgYmxvY2tzVG9QYWNrID0gYmxvY2tzVG9QYWNrLnJlZHVjZSgoYWNjdW11bGF0b3IsYmxvY2spID0+IHtcbiAgICAgICAgICBsZXQgYmxvY2tDYW5TcGxpdCA9IHRydWU7IC8vRGVmYXVsdCB0byB5ZXNcbiAgICAgICAgICBpZiAoKGJsb2NrLm1vZGVsLnNwbGl0KSAmJiAoYmxvY2subW9kZWwuc3BsaXQuaWZOZWVkZWQgPT0gZmFsc2UpKSB7YmxvY2tDYW5TcGxpdCA9IGZhbHNlfTtcbiAgICAgICAgICBpZiAoYmxvY2suc3BsaXRDb3VudCA+PSB0aGlzLm1heFNwbGl0SXRlcmF0aW9ucykge2Jsb2NrQ2FuU3BsaXQgPSBmYWxzZX1cbiAgICAgICAgICBpZiAoKGJsb2NrLm1vZGVsLnNwbGl0KSAmJiAoYmxvY2suc3BsaXRDb3VudCA+PSBibG9jay5tb2RlbC5zcGxpdC5tYXgpKSB7YmxvY2tDYW5TcGxpdCA9IGZhbHNlfVxuXG4gICAgICAgICAgaWYgKGJsb2NrQ2FuU3BsaXQpIHtcbiAgICAgICAgICAgIGxldCBzcGxpdEF0UGN0ID0gLjU7XG4gICAgICAgICAgICBpZiAoKGJsb2NrLm1vZGVsLnNwbGl0KSAmJiAoYmxvY2subW9kZWwuc3BsaXQuc3BsaXRBdFBjdCkpIHtzcGxpdEF0UGN0ID0gYmxvY2subW9kZWwuc3BsaXQuc3BsaXRBdFBjdH07XG4gICAgICAgICAgICAvL1RPRE86IEZpeCBsYWJlbGxpbmcgaGVyZSAtIGFsb25nWGF4aXMgYWN0dWFsbHkgbWVhbnMgcHV0IHRoZSBjdXR0ZXIgb24gdGhlIFkgYXhpcyBmb3Igc29tZSByZWFzb24gdG8gdGhlIHNwbGl0dGVyXG4gICAgICAgICAgICBsZXQgYWxvbmdYQXhpcyA9IGZhbHNlO1xuICAgICAgICAgICAgLy9UcnkgdG8gZ3Vlc3MgYW4gYXBwcm9wcmlhdGUgc3BsaXQgKGNob29zaW5nIHRoZSBsb25nZXN0IHNpZGUpXG4gICAgICAgICAgICAvL0FsbG93cyBmb3IgcmVwZWF0ZWQgc3BsaXR0aW5nIHNlbnNpYmx5XG4gICAgICAgICAgICBpZiAoYmxvY2sudyA+IGJsb2NrLmgpIHtcbiAgICAgICAgICAgICAgYWxvbmdYQXhpcyA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhbG9uZ1hBeGlzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL092ZXJyaWRlIGFueSBhdXRvbWF0aW9uIGlmIHRoaXMgaXMgc3BlY2lmaWNhbGx5IHNldFxuICAgICAgICAgICAgLy9hbG9uZ1hBeGlzIGFjdHVhbGx5IHJlc3VsdHMgaW4gYSB2ZXJ0aWNhbCBzcGxpdCAuLi4uIGJhZGx5IG5hbWVkXG4gICAgICAgICAgICBpZiAoKGJsb2NrLm1vZGVsLnNwbGl0KSAmJiAoYmxvY2subW9kZWwuc3BsaXQuYXhpcyA9PSAneScpKSB7YWxvbmdYQXhpcyA9IHRydWV9O1xuXG5cbiAgICAgICAgICAgIGxldCBzcGxpdE1vZGVscyA9IG1vZGVsU3BsaXR0ZXIuc3BsaXRNb2RlbChibG9jay5tb2RlbCxzcGxpdEF0UGN0LGFsb25nWEF4aXMpO1xuICAgICAgICAgICAgLy9ub3cgcmUtd3JhcCB0aGUgbW9kZWxzXG4gICAgICAgICAgICBpZiAoc3BsaXRNb2RlbHMpIHtcbiAgICAgICAgICAgICAgLy9maW5kIHRoZVxuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnU3BsaXQgbW9kZWxzJyxzcGxpdE1vZGVscyk7XG4gICAgICAgICAgICAgIGxldCBzaWRlQSA9IHRoaXMuY3JlYXRlTW9kZWxCbG9jayhzcGxpdE1vZGVscy5tb2RlbHMuYSxjdXJyZW50QmxvY2tJbmRleCsrKTtcbiAgICAgICAgICAgICAgc2lkZUEuc3BsaXRDb3VudCA9IGJsb2NrLnNwbGl0Q291bnQgKyAxO1xuICAgICAgICAgICAgICBsZXQgc2lkZUIgPSB0aGlzLmNyZWF0ZU1vZGVsQmxvY2soc3BsaXRNb2RlbHMubW9kZWxzLmIsY3VycmVudEJsb2NrSW5kZXgrKylcbiAgICAgICAgICAgICAgc2lkZUIuc3BsaXRDb3VudCA9IGJsb2NrLnNwbGl0Q291bnQgKyAxO1xuICAgICAgICAgICAgICBhY2N1bXVsYXRvci5wdXNoKHNpZGVBKTtcbiAgICAgICAgICAgICAgYWNjdW11bGF0b3IucHVzaChzaWRlQik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvL3NvbWV0aGluZyB3ZW50IHdyb25nIGFuZCB3ZSBjb3VsZG4ndCBzcGxpdCB0aGUgbW9kZWxcbiAgICAgICAgICAgICAgc2tpcFNwbGl0dGluZ0Jsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2tpcFNwbGl0dGluZ0Jsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgICB9LFtdKVxuICAgICAgICAvL05vdyB0cnkgYWN0dWFsbHkgcGFja2luZyB0aGUgc3BsaXQgaXRlbXNcbiAgICAgICAgdW5wYWNrZWRCbG9ja3MgPSBbXTtcbiAgICAgICAgaGVhcFBhY2tlci5zb3J0QmxvY2tzRm9yUGFja2luZyhibG9ja3NUb1BhY2spO1xuICAgICAgICBibG9ja3NUb1BhY2suZm9yRWFjaCgoYmxvY2spID0+IHtcbiAgICAgICAgICBsZXQgYmxvY2tIYXNQYWNrZWQgPSBoZWFwUGFja2VyLnBhY2tCbG9jayhibG9jayk7XG4gICAgICAgICAgaWYgKGJsb2NrSGFzUGFja2VkKSB7XG4gICAgICAgICAgICBwYWNrZWRCbG9ja3MucHVzaChibG9jayk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVucGFja2VkQmxvY2tzLnB1c2goYmxvY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuYWxsb3dSb3RhdGlvbikge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEZJTkFMIFBBU1M6IFJPVEFURSBTUExJVCBNT0RFTFMgYW5kIHRyeSBhZ2FpblxuICAgICAgICAgICAqL1xuICAgICAgICAgIGJsb2Nrc1RvUGFjayA9IHVucGFja2VkQmxvY2tzO1xuICAgICAgICAgIGJsb2Nrc1RvUGFjay5mb3JFYWNoKChibG9jaykgPT4ge1xuICAgICAgICAgICByb3RhdGVCbG9jayhibG9jayk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB1bnBhY2tlZEJsb2NrcyA9IFtdO1xuICAgICAgICAgIGhlYXBQYWNrZXIuc29ydEJsb2Nrc0ZvclBhY2tpbmcoYmxvY2tzVG9QYWNrKTtcbiAgICAgICAgICBibG9ja3NUb1BhY2suZm9yRWFjaCgoYmxvY2spID0+IHtcbiAgICAgICAgICAgbGV0IGJsb2NrSGFzUGFja2VkID0gaGVhcFBhY2tlci5wYWNrQmxvY2soYmxvY2spO1xuICAgICAgICAgICBpZiAoYmxvY2tIYXNQYWNrZWQpIHtcbiAgICAgICAgICAgICBwYWNrZWRCbG9ja3MucHVzaChibG9jayk7XG4gICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgdW5wYWNrZWRCbG9ja3MucHVzaChibG9jayk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vSWYgdGhlcmUgYXJlIHN0aWxsIGJsb2NrcyB0byBwYWNrIHJlbWFpbmluZyAodW5wYWNrZWQgYmxvY2tzKSB0aGVuIGN5Y2xlIHRocm91Z2ggc3BsaXR0aW5nIHRoZW0gZG93biBhZ2FpblxuICAgICAgICAvL0lmIHVucGFja2VkIGJsb2NrcyBpcyB6ZXJvIHRoZXkgYXJlIGVpdGhlIHJhbGwgcGFja2VkIG9yIHRoZXkgaGF2ZSBmYWlsZWQgc3BsaXR0aW5nXG4gICAgICAgIGlmICh1bnBhY2tlZEJsb2Nrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYmxvY2tzVG9QYWNrID0gdW5wYWNrZWRCbG9ja3M7XG5cbiAgICAgICAgICBpZiAodGhpcy5hbGxvd1JvdGF0aW9uKSB7XG4gICAgICAgICAgICAvL3Vucm90YXRlIHRoZW0gZmlyc3QgYmVmb3JlIHNlbmRpbmcgdGhlbSByb3VuZCBhZ2FpblxuICAgICAgICAgICAgYmxvY2tzVG9QYWNrLmZvckVhY2goKGJsb2NrKSA9PiB7XG4gICAgICAgICAgICAgcm90YXRlQmxvY2soYmxvY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRpbnVlU3BsaXR0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cblxuXG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEZJTkFMIEFDVElPTjogTWVyZ2UgdGhlIHVucGFja2VkIGl0ZW1zIGFuZCB0aGUgc2tpcHBlZCBzcGxpdHRpbmcgaXRlbXMgdG9nZXRoZXIgYXMgdGhlIGZpbmFsIGZhaWxlZCBpdGVtc1xuICAgICAgICovXG4gICAgICAvL01lcmdlIHRoZSByZW1haW5pbmcgdW5wYWNrZWQgYW5kIHVuc3BsaXQgbW9kZWxzIHRvZ2V0aGVyXG4gICAgICB1bnBhY2tlZEJsb2NrcyA9IHVucGFja2VkQmxvY2tzLmNvbmNhdChza2lwU3BsaXR0aW5nQmxvY2tzKTtcbiAgICAgIC8vTm93IHRyeSByb3RhdGluZyB0aGVzZVxuICAgIH1cblxuICAgIHVucGFja2VkQmxvY2tzID0gdW5wYWNrZWRCbG9ja3MuY29uY2F0KGZhaWxpbmdNb2RlbHMpO1xuXG4gICAgLy9HaXZlIHVwXG4gICAgLy9DYWxsIHRoaXMgdG8gcHJldmVudCBlbXB0eSBwYWdlcyBiZWluZyBzZW50IHRvIHRoZSBQREYgcmVuZGVyZWQgKGl0IG1vYW5zKVxuICAgIGhlYXBQYWNrZXIudHJpbUVtcHR5UGFja0FyZWFzKCk7XG5cbiAgICBsZXQgcGFja2VkUGFnZXMgPSBoZWFwUGFja2VyLnBhY2tlZEFyZWFzKCk7XG5cbiAgICAvL0NvbnZlcnQgdGhlIGhlYXBQYWNrZXIncyBwYWdlcyAmIGJsb2NrcyBiYWNrIGludG8gYXJyYXlzIG9mIG1vZGVscyB3aXRoIGFwcHJvcHJpYXRlIG9mZnNldHNcbiAgICBsZXQgcGFnZU1vZGVscyA9IHBhY2tlZFBhZ2VzLm1hcCgocGFja2VkUGFnZSkgPT4ge1xuICAgICAgLy9TZXQgdGhlIHBhZ2UgYXMgYW4gZW1wdHkgcGFyZW50IG1vZGVsXG4gICAgICBsZXQgcGFnZU1vZGVsID0ge21vZGVsczoge30sIHBhZ2VzOiB7fSwgb3JpZ2luOiBbMCwwXX07XG4gICAgICBwYWNrZWRQYWdlLmJsb2Nrcy5mb3JFYWNoKChwYWdlQmxvY2tNb2RlbCkgPT4ge1xuXG4gICAgICAgIC8vIG1ha2VyanMubW9kZWwubW92ZShcbiAgICAgICAgLy8gICBwYWdlQmxvY2tNb2RlbC5tb2RlbCxcbiAgICAgICAgLy8gICBbLW9mZnNldFswXSwtb2Zmc2V0WzFdXVxuICAgICAgICAvLyApXG5cbiAgICAgICAgaWYgKHBhZ2VCbG9ja01vZGVsLnJvdGF0ZWQpIHtcbiAgICAgICAgICBtYWtlcmpzLm1vZGVsLnJvdGF0ZShwYWdlQmxvY2tNb2RlbC5tb2RlbCw5MCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1vZGVsRXh0ZW50cyA9IG1ha2VyanMubWVhc3VyZS5tb2RlbEV4dGVudHMocGFnZUJsb2NrTW9kZWwubW9kZWwpO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gbW9kZWxFeHRlbnRzLmxvdztcblxuICAgICAgICBtYWtlcmpzLm1vZGVsLmFkZE1vZGVsKFxuICAgICAgICAgIHBhZ2VNb2RlbCxcbiAgICAgICAgICBtYWtlcmpzLm1vZGVsLm1vdmUoXG4gICAgICAgICAgICBwYWdlQmxvY2tNb2RlbC5tb2RlbCxcbiAgICAgICAgICAgIG1ha2VyanMucG9pbnQuc3VidHJhY3QoW3BhZ2VCbG9ja01vZGVsLngscGFnZUJsb2NrTW9kZWwueV0sb2Zmc2V0KVxuICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICAvL0NhcHRpb25zIG5lZWQgc3BlY2lhbCBhdHRlbnRpb25cbiAgICAgICAgaWYgKHBhZ2VCbG9ja01vZGVsLm1vZGVsLmNhcHRpb24pIHtcbiAgICAgICAgICBtYWtlcmpzLnBhdGgubW92ZShcbiAgICAgICAgICAgIHBhZ2VCbG9ja01vZGVsLm1vZGVsLmNhcHRpb24uYW5jaG9yLFxuICAgICAgICAgICAgW3BhZ2VCbG9ja01vZGVsLngscGFnZUJsb2NrTW9kZWwueV1cbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcGFnZU1vZGVsO1xuICAgIH0pO1xuXG5cbiAgICByZXR1cm4ge1xuICAgICAgcGFja2VkUGFnZXM6IHBhZ2VNb2RlbHMsXG4gICAgICB1bnBhY2tlZE1vZGVsczogdW5wYWNrZWRCbG9ja3MubWFwKChibG9jaykgPT4gKGJsb2NrLm1vZGVsKSlcbiAgICB9XG4gIH1cblxuXG59XG4iLCJpbXBvcnQgeyBydW5EcmF3Q29kZSB9IGZyb20gJy4vY29kZXJ1bm5lci9jb2RlcnVubmVyLmpzJztcbmltcG9ydCBtYWtlcmpzIGZyb20gJ21ha2VyanMnO1xuaW1wb3J0IHsgTW9kZWxQYWNrZXIgfSBmcm9tICcuL21vZGVscGFja2VyLmpzJztcbmltcG9ydCBQREZEb2N1bWVudCBmcm9tICdwZGZraXRTdGFuZGFsb25lJztcbmltcG9ydCBibG9iU3RyZWFtIGZyb20gJ2Jsb2Itc3RyZWFtJztcblxuZnVuY3Rpb24gbW1Ub1BERlBQSShtbURpc3RhbmNlKSB7XG4gIC8vcGl4ZWwgPSBkcGkgKiBtbSAvIDI1LjQgbW0gKDEgaW4pXG4gIGNvbnN0IFBERlBQSSA9IDcyO1xuICByZXR1cm4gUERGUFBJICogbW1EaXN0YW5jZSAvIDI1LjQ7XG59XG5cblxuZnVuY3Rpb24gYmxvYlRvQmFzZTY0KGJsb2IpIHtcbiAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoYmxvYik7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4ge1xuICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KTtcbiAgICB9O1xuICB9KTtcbn07XG5cblxuZXhwb3J0IGNsYXNzIFJlbmRlckVuZ2luZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmVuZGVySW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gIH1cblxuICBnZXRSZW5kZXJJblByb2dyZXNzKCkge1xuICAgIHJldHVybiB0aGlzLnJlbmRlckluUHJvZ3Jlc3M7XG4gIH1cblxuICBzY2FsZU1vZGVsVG9QREZQUEkobW9kZWwpIHtcbiAgICAvL1NUb2xlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L21ha2VyLmpzL2Jsb2IvYjE4ZjhhOGQvcGFja2FnZXMvbWFrZXIuanMvc3JjL2NvcmUvcGRmLnRzI0wxMVxuICAgIC8vdHJ5IHRvIGdldCB0aGUgdW5pdCBzeXN0ZW0gZnJvbSB0aGUgaXRlbVRvRXhwb3J0XG4gICAgdmFyIHNjYWxlID0gMTtcbiAgICB2YXIgZXhwb3J0VW5pdHMgPSAnbW0nO1xuICAgIGlmIChleHBvcnRVbml0cykge1xuICAgICAgICAvL2NvbnZlcnQgdG8gaW5jaFxuICAgICAgICBzY2FsZSA9IG1ha2VyanMudW5pdHMuY29udmVyc2lvblNjYWxlKGV4cG9ydFVuaXRzLCBtYWtlcmpzLnVuaXRUeXBlLkluY2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vYXNzdW1lIHBpeGVscywgY29udmVydCB0byBpbmNoXG4gICAgICAgIHNjYWxlID0gMSAvIDEwMDtcbiAgICB9XG5cbiAgICAvL2Zyb20gaW5jaCB0byBQREYgUFBJXG4gICAgc2NhbGUgKj0gNzI7XG5cbiAgICAvL1RPRE8gc2NhbGUgZWFjaCBlbGVtZW50IHdpdGhvdXQgYSB3aG9sZSBjbG9uZVxuICAgIHZhciBzY2FsZWRNb2RlbCA9IG1ha2VyanMubW9kZWwuc2NhbGUobWFrZXJqcy5tb2RlbC5jbG9uZShtb2RlbCksIHNjYWxlKTtcbiAgICByZXR1cm4gc2NhbGVkTW9kZWw7XG4gIH1cblxuICByZW5kZXJNb2RlbFRvU1ZHKG1vZGVsLHJlbmRlck9wdHMpe1xuICAgIGxldCByZW5kZXJPcHRpb25zID0ge1xuICAgICAgc3R5bGVTZXQ6IHtcbiAgICAgICAgICBzdGl0Y2g6IHtcbiAgICAgICAgICAgIHN0cm9rZTogJ3JlZCcsXG4gICAgICAgICAgICBzdHJva2VXaWR0aDogJzEnLFxuICAgICAgICAgICAgY3NzU3R5bGU6ICdzdHJva2UtZGFzaGFycmF5OiA1LCA1J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgICBzdHJva2U6ICdncmVlbicsXG4gICAgICAgICAgICBzdHJva2VXaWR0aDogJzEnLFxuICAgICAgICAgICAgY3NzU3R5bGU6ICdzdHJva2UtZGFzaGFycmF5OiA1LCA1LCAxMiwgNSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhpbnQ6IHtcbiAgICAgICAgICAgIHN0cm9rZTogJ2JsdWUnLFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGg6ICcxJyxcbiAgICAgICAgICAgIGNzc1N0eWxlOiAnc3Ryb2tlLWRhc2hhcnJheTogMiwgOCdcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24ocmVuZGVyT3B0aW9ucyxyZW5kZXJPcHRzKTtcblxuXG4gICAgbW9kZWwudW5pdHMgPSBtYWtlcmpzLnVuaXRUeXBlLk1pbGxpbWV0ZXI7XG4gICAgcmV0dXJuIG1ha2VyanMuZXhwb3J0ZXIudG9TVkcobW9kZWwsIHtcbiAgICAgIHVzZVN2Z1BhdGhPbmx5OiBmYWxzZSxcbiAgICAgIHVuaXRzOiAnbW0nLFxuICAgICAgbGF5ZXJPcHRpb25zOiByZW5kZXJPcHRpb25zLnN0eWxlU2V0XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXJQYWdlTW9kZWxzVG9TVkcocGFnZU1vZGVscyxyZW5kZXJPcHRpb25zKSB7XG4gICAgbGV0IHN2Z1BhZ2VzID0gcGFnZU1vZGVscy5tYXAoKHBhY2tlZFBhZ2UpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlck1vZGVsVG9TVkcocGFja2VkUGFnZSxyZW5kZXJPcHRpb25zKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3ZnUGFnZXMpO1xuICB9XG5cbiAgbW9kZWxUb1BERihkb2MsbW9kZWwscGFnZU1hcmdpbnMsbGF5ZXJTdHlsZXMpIHtcbiAgICAvL0Vuc3VyZSB0aGVyZSBpcyBhIHN0eWxlc2V0IGFuZCBpdCBoYXMgYSBiYXNlIHN0eWxlc2V0IGFzIG1pbmltdW0gLSBhcyB0aGlzIHdpbGwgYmUgdGhlIGRlZmF1bHRcbiAgICBpZiAoIWxheWVyU3R5bGVzKSB7XG4gICAgICBsYXllclN0eWxlcyA9IHt9O1xuICAgIH1cbiAgICBpZiAoIWxheWVyU3R5bGVzLmJhc2UpIHtcbiAgICAgIGxheWVyU3R5bGVzLmJhc2UgPSB7XG4gICAgICAgIHN0cm9rZVdpZHRoOiAxLFxuICAgICAgICBzdHJva2VDb2xvcjogJyMwMDAnXG4gICAgICB9XG4gICAgfVxuICAgIC8vTm90IHVzaW5nIFBERk1ha2UgYXMgaXQgZG9lc24ndCBsZXQgdXMgY29udHJvbCBwYWdlc1xuICAgIGxldCBzY2FsZWRNb2RlbCA9IHRoaXMuc2NhbGVNb2RlbFRvUERGUFBJKG1vZGVsKTtcbiAgICAvL0FwcGx5IE1hcmdpbnNcbiAgICAvLyBtYWtlcmpzLm1vZGVsLm1vdmUoc2NhbGVkTW9kZWwsWzEwMCwxMDBdKTtcbiAgICBsZXQgbW9kZWxFeHRlbnRzID0gbWFrZXJqcy5tZWFzdXJlLm1vZGVsRXh0ZW50cyhzY2FsZWRNb2RlbCk7XG5cbiAgICBsZXQgc3ZnUGF0aHMgPSBtYWtlcmpzLmV4cG9ydGVyLnRvU1ZHUGF0aERhdGEoc2NhbGVkTW9kZWwse1xuICAgICAgb3JpZ2luOiBbbW1Ub1BERlBQSShwYWdlTWFyZ2lucy5sZWZ0KSxtb2RlbEV4dGVudHMuaGlnaFsxXSttbVRvUERGUFBJKHBhZ2VNYXJnaW5zLnRvcCldLFxuICAgICAgYnlMYXllcnM6IHRydWVcbiAgICB9KTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzdmdQYXRocykpIHtcbiAgICAgIC8vIGNvbXBvbmVudHMgPSBjb21wb25lbnRzLmNvbmNhdChmaW5kQ29tcG9uZW50c0luTW9kZWxUcmVlcyh2YWx1ZSkpO1xuXG4gICAgICAvL1NhdmUgdGhlIGJhc2Ugc3R5bGUgc28gd2UgY2FuIHJlc3RvcmUgdG8gaXQgbGF0ZXJcbiAgICAgIGRvYy5zYXZlKCk7XG4gICAgICBkb2MucGF0aCh2YWx1ZSk7XG4gICAgICAvL0FwcGx5IHRoZSBzdHlsZSBpZiB0aGUgbGF5ZXIgaGFzIG9uZSBpbiBzdHlsZXNldFxuICAgICAgbGV0IHN0eWxlID0gbGF5ZXJTdHlsZXNbKCgha2V5KSB8fCAoa2V5PT0nJykpPydiYXNlJzprZXldO1xuICAgICAgaWYgKCFzdHlsZSkge3N0eWxlID0gbGF5ZXJTdHlsZXMuYmFzZX1cblxuICAgICAgaWYgKHN0eWxlKSB7XG4gICAgICAgIGlmIChzdHlsZS5zdHJva2VXaWR0aCkge2RvYy5saW5lV2lkdGgoc3R5bGUuc3Ryb2tlV2lkdGgpO31cbiAgICAgICAgaWYgKHN0eWxlLmRhc2hlZCkge2RvYy5kYXNoKHN0eWxlLmRhc2hlZFswXSxzdHlsZS5kYXNoZWRbMV0pO30gZWxzZSB7ZG9jLnVuZGFzaCgpfVxuICAgICAgICBpZiAoc3R5bGUuc3Ryb2tlQ29sb3IpIHtkb2Muc3Ryb2tlKHN0eWxlLnN0cm9rZUNvbG9yKTt9XG4gICAgICB9XG5cblxuICAgICAgLy9SZXN0b3JlIGlmIGFueSBjaGFuZ2VzIHRvIHRoZSBzdHlsZXNcbiAgICAgIGRvYy5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgbWFrZXJqcy5tb2RlbC5nZXRBbGxDYXB0aW9uc09mZnNldChzY2FsZWRNb2RlbCkuZm9yRWFjaCgobW9kZWxDYXB0aW9uKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnUHJvY2Vzc2luZycsbW9kZWxDYXB0aW9uKTtcbiAgICAgIGRvYy50ZXh0KFxuICAgICAgICBtb2RlbENhcHRpb24udGV4dCxcbiAgICAgICAgbW9kZWxFeHRlbnRzLmxvd1swXSArIG1tVG9QREZQUEkocGFnZU1hcmdpbnMubGVmdCkgKyBtb2RlbENhcHRpb24uYW5jaG9yLm9yaWdpblswXSxcbiAgICAgICAgKG1vZGVsRXh0ZW50cy5oaWdoWzFdICsgbW1Ub1BERlBQSShwYWdlTWFyZ2lucy50b3ApKSAtIG1vZGVsQ2FwdGlvbi5hbmNob3Iub3JpZ2luWzFdIC0gKChtb2RlbENhcHRpb24uYW5jaG9yLmVuZFsxXSAtIG1vZGVsQ2FwdGlvbi5hbmNob3Iub3JpZ2luWzFdKS8yKSxcbiAgICAgICAge1xuICAgICAgICAgIGJhc2VsaW5lOiAndG9wJ1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgY29uc29sZS5sb2coJ1Byb2Nlc3NpbmcnLG1vZGVsQ2FwdGlvbixtb2RlbEV4dGVudHMsIG1tVG9QREZQUEkocGFnZU1hcmdpbnMudG9wKSxtb2RlbEV4dGVudHMubG93WzBdICsgbW1Ub1BERlBQSShwYWdlTWFyZ2lucy5sZWZ0KSArIG1vZGVsQ2FwdGlvbi5hbmNob3Iub3JpZ2luWzBdLChtb2RlbEV4dGVudHMuaGlnaFsxXSArIG1tVG9QREZQUEkocGFnZU1hcmdpbnMudG9wKSkgLSBtb2RlbENhcHRpb24uYW5jaG9yLm9yaWdpblsxXSk7XG4gICAgfSk7XG5cblxuICB9XG5cbiAgcmVuZGVyUGFnZU1vZGVsc1RvUERGKHBhZ2VNb2RlbHMscmVuZGVyT3B0cykge1xuICAgIGxldCByZW5kZXJPcHRpb25zID0ge1xuICAgICAgc3R5bGVTZXQ6IHtcbiAgICAgICAgYmFzZToge1xuICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMScsXG4gICAgICAgICAgc3Ryb2tlQ29sb3I6ICcjMDAwJ1xuICAgICAgICB9LFxuICAgICAgICBjZW50ZXI6IHtcbiAgICAgICAgICBzdHJva2VXaWR0aDogJzEnLFxuICAgICAgICAgIGRhc2hlZDogWzEwLDIwXSxcbiAgICAgICAgICBzdHJva2VDb2xvcjogJyMwRjAnXG4gICAgICAgIH0sXG4gICAgICAgIGhpbnQ6IHtcbiAgICAgICAgICBzdHJva2VXaWR0aDogJzEnLFxuICAgICAgICAgIGRhc2hlZDogWzUsNV0sXG4gICAgICAgICAgc3Ryb2tlQ29sb3I6ICcjMDBGJ1xuICAgICAgICB9LFxuICAgICAgICBzdGl0Y2g6IHtcbiAgICAgICAgICBzdHJva2VXaWR0aDogJzEnLFxuICAgICAgICAgIGRhc2hlZDogWzIsMTBdLFxuICAgICAgICAgIHN0cm9rZUNvbG9yOiAnI0YwMDAnXG4gICAgICAgIH0sXG4gICAgICAgIHBhdHRlcm5Kb2luTGluZToge1xuICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMScsXG4gICAgICAgICAgZGFzaGVkOiBbMiwxMF0sXG4gICAgICAgICAgc3Ryb2tlQ29sb3I6ICcjYjJjJ1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHBhZ2VNYXJnaW5zOiA1LFxuICAgICAgdW5pdHM6ICdtbScsXG4gICAgICBsYXlvdXQ6ICdwb3J0cmFpdCcsXG4gICAgICBwYWdlU2l6ZTogJ0E0JyxcblxuICAgIH1cblxuICAgIE9iamVjdC5hc3NpZ24ocmVuZGVyT3B0aW9ucyxyZW5kZXJPcHRzKTtcblxuICAgIC8vRG8gc29tZSBzYW5pdHkgY2hlY2tpbmdcbiAgICBpZiAoIXJlbmRlck9wdGlvbnMucGFnZVNpemUpIHtcbiAgICAgIHRocm93ICdQYWdlIHNpemUgbXVzdCBiZSBzcGVjaWZpZWQgZm9yIFBERiByZW5kZXJpbmcsIHRyeSBBNCdcbiAgICB9XG5cbiAgICBpZiAocmVuZGVyT3B0aW9ucy5wYWdlTWFyZ2lucykge1xuICAgICAgLy9mb3JjZSBwYWdlTWFyZ2lucyB0byBiZSBhbiBvYmplY3QgZm9yIHNpbXBsaWNpdHkgbGF0ZXJgXG4gICAgICAvL01vZGVsIHBhY2tlciBzaG91bGQgaGF2ZSB0YWtlbiBjYXJlIG9mIHRoaXMgZm9yIHVzXG4gICAgICBpZiAodHlwZW9mIHJlbmRlck9wdGlvbnMucGFnZU1hcmdpbnMgIT0gXCJvYmplY3RcIikge1xuICAgICAgICByZW5kZXJPcHRpb25zLnBhZ2VNYXJnaW5zID0ge1xuICAgICAgICAgIGxlZnQ6IHJlbmRlck9wdGlvbnMucGFnZU1hcmdpbnMsXG4gICAgICAgICAgcmlnaHQ6IHJlbmRlck9wdGlvbnMucGFnZU1hcmdpbnMsXG4gICAgICAgICAgdG9wOiByZW5kZXJPcHRpb25zLnBhZ2VNYXJnaW5zLFxuICAgICAgICAgIGJvdHRvbTogcmVuZGVyT3B0aW9ucy5wYWdlTWFyZ2luc1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9jdGlvbiBjcmVhdGVQYWdlc0FzUERGKHBhZ2VzLG1hcmdpblRvcExlZnQgPSBbMCwwXSxzdHlsZVNldCA9IG51bGwscGRmQWN0aW9uKXtcbiAgICAvL1xuICAgIGxldCBwZGZQYWdlU2V0dGluZ3MgPSB7XG4gICAgICBsYXlvdXQ6IHJlbmRlck9wdGlvbnMubGF5b3V0LFxuICAgICAgLy9pZiB0aGUgcGFnZVNpemUgaXMgYSBzdHJpbmcgYXNzdW1lIGl0cyBBNCxBNSBvciBzaW1pbGFyLCBvdGhlcndpc2UgYXNzdW1lIGl0cyBwYWdlIGRpbXMgb2JqZWN0IHdpdGggeCBhbmQgeVxuICAgICAgc2l6ZTogKCh0eXBlb2YgcmVuZGVyT3B0aW9ucy5wYWdlU2l6ZSA9PSAnc3RyaW5nJyk/KHJlbmRlck9wdGlvbnMucGFnZVNpemUpOihbbW1Ub1BERlBQSShyZW5kZXJPcHRpb25zLnBhZ2VTaXplLngpLG1tVG9QREZQUEkocmVuZGVyT3B0aW9ucy5wYWdlU2l6ZS55KV0pKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdQREYgU2V0dXAnLHBkZlBhZ2VTZXR0aW5ncyk7XG4gICAgbGV0IGRvYyA9IG5ldyBQREZEb2N1bWVudCh7XG4gICAgICBhdXRvRmlyc3RQYWdlOiBmYWxzZSxcbiAgICB9KTtcblxuICAgIGxldCBzdHJlYW0gPSBkb2MucGlwZShibG9iU3RyZWFtKCkpO1xuICAgIHBhZ2VNb2RlbHMuZm9yRWFjaChwYWdlID0+IHtcbiAgICAgIGRvYy5hZGRQYWdlKHBkZlBhZ2VTZXR0aW5ncyk7XG5cbiAgICAgIC8vIG1ha2VyanMuZXhwb3J0ZXIudG9QREYoZG9jLHBhZ2UscGRmRXhwb3J0T3B0aW9ucyk7XG4gICAgICB0aGlzLm1vZGVsVG9QREYoZG9jLHBhZ2UscmVuZGVyT3B0aW9ucy5wYWdlTWFyZ2lucyxyZW5kZXJPcHRpb25zLnN0eWxlU2V0KTtcbiAgICB9KTtcblxuICAgIC8vIEZpbmFsaXplIFBERiBmaWxlXG4gICAgZG9jLmVuZCgpO1xuICAgIC8vIGdldCBhIGJsb2Igd2hlbiB5b3UncmUgZG9uZVxuXG5cblxuICAgIGxldCBwZGZDb21wbGV0ZWQgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc3RyZWFtLm9uKCdmaW5pc2gnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAvLyBnZXQgYSBibG9iIHlvdSBjYW4gZG8gd2hhdGV2ZXIgeW91IGxpa2Ugd2l0aFxuICAgICAgICAgIGNvbnN0IGJsb2IgPSBzdHJlYW0udG9CbG9iKCdhcHBsaWNhdGlvbi9wZGYnKTtcbiAgICAgICAgICByZXNvbHZlKGJsb2JUb0Jhc2U2NChibG9iKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZWplY3QoKVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcGRmQ29tcGxldGVkO1xuICB9XG5cbiAgcmVuZGVyQ29kZShjb2RlLG9wdGlvbnMscmVzcG9uc2VDYWxsYmFjaykge1xuICAgIHRoaXMucmVuZGVySW5Qcm9ncmVzcyA9IHRydWU7XG5cbiAgICBsZXQgcmVuZGVyT3B0aW9ucyA9IHtcbiAgICAgIGZvcm1hdDogJ1NWRycsXG4gICAgICBwYWdlU2l6ZToge3g6IDEwMDAsIHk6IDEwMDB9LFxuICAgICAgcGFja1RvUGFnZXM6IGZhbHNlLFxuICAgICAgY2FuQWRkUGFnZXM6IHRydWUsXG4gICAgICBjYW5Hcm93UGFnZVNpemU6IGZhbHNlLFxuICAgICAgcGFnZU1hcmdpbnM6IDEwLFxuICAgICAgYWxsb3dTcGxpdHRpbmc6IHRydWUsXG4gICAgICBhbGxvd1JvdGF0aW9uOiB0cnVlXG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24ocmVuZGVyT3B0aW9ucyxvcHRpb25zKTtcblxuICAgIGlmIChyZW5kZXJPcHRpb25zLnBhZ2VNYXJnaW5zKSB7XG4gICAgICAvL2ZvcmNlIHBhZ2VNYXJnaW5zIHRvIGJlIGFuIG9iamVjdCBmb3Igc2ltcGxpY2l0eSBsYXRlcmBcbiAgICAgIC8vTW9kZWwgcGFja2VyIHNob3VsZCBoYXZlIHRha2VuIGNhcmUgb2YgdGhpcyBmb3IgdXNcbiAgICAgIGlmICh0eXBlb2YgcmVuZGVyT3B0aW9ucy5wYWdlTWFyZ2lucyAhPSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHJlbmRlck9wdGlvbnMucGFnZU1hcmdpbnMgPSB7XG4gICAgICAgICAgbGVmdDogcmVuZGVyT3B0aW9ucy5wYWdlTWFyZ2lucyxcbiAgICAgICAgICByaWdodDogcmVuZGVyT3B0aW9ucy5wYWdlTWFyZ2lucyxcbiAgICAgICAgICB0b3A6IHJlbmRlck9wdGlvbnMucGFnZU1hcmdpbnMsXG4gICAgICAgICAgYm90dG9tOiByZW5kZXJPcHRpb25zLnBhZ2VNYXJnaW5zXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdXNlclBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKHt9LG9wdGlvbnMudXNlclBhcmFtZXRlcnMpO1xuXG4gICAgbGV0IGNvZGVSdW5uZXJSZXN1bHQgPSBydW5EcmF3Q29kZShjb2RlLHVzZXJQYXJhbWV0ZXJzKTtcblxuICAgIGxldCBtb2RlbHNGb3JQYWdlUGFja2luZyA9IGNvZGVSdW5uZXJSZXN1bHQub3V0cHV0O1xuICAgIGlmICgoQXJyYXkuaXNBcnJheShtb2RlbHNGb3JQYWdlUGFja2luZykpICYmIChtb2RlbHNGb3JQYWdlUGFja2luZy5sZW5ndGggPiAwKSkge1xuXG4gICAgICBsZXQgbW9kZWxQYWNrZXIgPSBuZXcgTW9kZWxQYWNrZXIoe1xuICAgICAgICBwYWdlU2l6ZToge1xuICAgICAgICAgIHg6IE1hdGgubWF4KHJlbmRlck9wdGlvbnMucGFnZVNpemUueCAtIChyZW5kZXJPcHRpb25zLnBhZ2VNYXJnaW5zLmxlZnQgKyByZW5kZXJPcHRpb25zLnBhZ2VNYXJnaW5zLnJpZ2h0KSwwKSxcbiAgICAgICAgICB5OiBNYXRoLm1heChyZW5kZXJPcHRpb25zLnBhZ2VTaXplLnkgLSAocmVuZGVyT3B0aW9ucy5wYWdlTWFyZ2lucy50b3AgKyByZW5kZXJPcHRpb25zLnBhZ2VNYXJnaW5zLmJvdHRvbSksMCksXG4gICAgICAgIH0sXG4gICAgICAgIHBhZ2VTaXplR3Jvd0xpbWl0OiB7eDogLTEsIHk6IC0xfSxcbiAgICAgICAgY2FuQWRkUGFnZXM6IHJlbmRlck9wdGlvbnMuY2FuQWRkUGFnZXMsXG4gICAgICAgIGNhbkdyb3dQYWdlU2l6ZTogcmVuZGVyT3B0aW9ucy5jYW5Hcm93UGFnZVNpemUsXG4gICAgICAgIGFsbG93Um90YXRpb246IHJlbmRlck9wdGlvbnMuYWxsb3dSb3RhdGlvbixcbiAgICAgICAgYWxsb3dTcGxpdHRpbmc6IHJlbmRlck9wdGlvbnMuYWxsb3dTcGxpdHRpbmdcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgcGFja2luZ1Jlc3VsdCA9IG1vZGVsUGFja2VyLnBhY2tNb2RlbHMobW9kZWxzRm9yUGFnZVBhY2tpbmcpO1xuICAgICAgY29uc29sZS5sb2coJ1BhY2tpbmcgUmVzdWx0JyxwYWNraW5nUmVzdWx0KTtcbiAgICAgIGxldCByZW5kZXJlZFBhZ2VzID0gW107XG4gICAgICBpZiAocmVuZGVyT3B0aW9ucy5mb3JtYXQgPT0gJ1NWRycpIHtcbiAgICAgICAgcmVuZGVyZWRQYWdlcyA9IHRoaXMucmVuZGVyUGFnZU1vZGVsc1RvU1ZHKHBhY2tpbmdSZXN1bHQucGFja2VkUGFnZXMscmVuZGVyT3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYocmVuZGVyT3B0aW9ucy5mb3JtYXQgPT0gJ1BERicpIHtcbiAgICAgICAgcmVuZGVyZWRQYWdlcyA9IHRoaXMucmVuZGVyUGFnZU1vZGVsc1RvUERGKHBhY2tpbmdSZXN1bHQucGFja2VkUGFnZXMscmVuZGVyT3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIGxldCByZW5kZXJlZFNWRyA9IHRoaXMucmVuZGVyTW9kZWxzVG9TVkcoY29kZVJ1bm5lclJlc3VsdC5vdXRwdXQpO1xuICAgICAgLy8gY29uc29sZS5sb2coJ1NWRyBQQWdlcycscmVuZGVyZWRTVkdQYWdlcyk7XG4gICAgICByZW5kZXJlZFBhZ2VzLnRoZW4oKHJlbmRlcmVkRGF0YSkgPT4ge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVuZGVyZWREYXRhKSkge3JlbmRlcmVkRGF0YSA9IFtyZW5kZXJlZERhdGFdfTtcbiAgICAgICAgcmVzcG9uc2VDYWxsYmFjayh7XG4gICAgICAgICAgdHlwZTogJ3JlbmRlclJlc3BvbnNlJyxcbiAgICAgICAgICBjb250ZW50VHlwZTogcmVuZGVyT3B0aW9ucy5mb3JtYXQsXG4gICAgICAgICAgcmVuZGVyRm9yOiBvcHRpb25zLnJlbmRlckZvcixcbiAgICAgICAgICBzdWNjZXNzQ29udGVudDogcmVuZGVyZWREYXRhLFxuICAgICAgICAgIGVycm9yQ29udGVudDogcGFja2luZ1Jlc3VsdC51bnBhY2tlZE1vZGVscyxcbiAgICAgICAgICBsb2dNZXNzYWdlczogW10sXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZUNhbGxiYWNrKHtcbiAgICAgICAgdHlwZTogJ3JlbmRlclJlc3BvbnNlJyxcbiAgICAgICAgY29udGVudFR5cGU6IHJlbmRlck9wdGlvbnMuZm9ybWF0LFxuICAgICAgICByZW5kZXJGb3I6IG9wdGlvbnMucmVuZGVyRm9yLFxuICAgICAgICBzdWNjZXNzQ29udGVudDogW10sXG4gICAgICAgIGVycm9yQ29udGVudDogW10sXG4gICAgICAgIGxvZ01lc3NhZ2VzOiBbXSxcbiAgICAgIH0pXG4gICAgfVxuXG5cblxuICAgIHRoaXMucmVuZGVySW5Qcm9ncmVzcyA9IGZhbHNlO1xuICB9XG5cbiAgcmVzZXQoKSB7XG5cbiAgfVxufVxuIiwiaW1wb3J0IG1ha2VyanMgZnJvbSAnbWFrZXJqcyc7XG5pbXBvcnQgeyBDb2RlUnVubmVyVXRpbHMgfSBmcm9tICcuL2NvZGVydW5uZXJ1dGlscy5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBydW5EcmF3Q29kZShkcmF3Q29kZSx1c2VyUGFyYW1ldGVycyl7XG4gIGxldCBDb2RlV3JhcHBlckZ1bmN0aW9uID0gbmV3IEZ1bmN0aW9uKCdjb25zb2xlJywnbWFrZXJqcycsJ01ha2VySnMnLCd1c2VyUGFyYW1ldGVycycsJ3V0aWxzJywgZHJhd0NvZGUpO1xuICBDb2RlV3JhcHBlckZ1bmN0aW9uLnByb3RvdHlwZS5tb2RlbHMgPSB7fTtcbiAgLy9UT0RPOiBXcmFwIHRoZSBjb25zb2xlIHdpdGggYW4gb2JqZWN0IHRoYXQgdGFrZXMgb3ZlciBhbmQgZmVlZHMgYmFjayB0byB0aGUgVUlcbiAgbGV0IGNydSA9IG5ldyBDb2RlUnVubmVyVXRpbHMoKTtcbiAgbGV0IGNvZGVSZXN1bHQgPSBuZXcgQ29kZVdyYXBwZXJGdW5jdGlvbihjb25zb2xlLG1ha2VyanMsbWFrZXJqcyx1c2VyUGFyYW1ldGVycyxjcnUpO1xuXG4gIGxldCByZXR1cm5WYWwgPSBudWxsO1xuXG4gIGlmIChjb2RlUmVzdWx0KSB7XG4gICAgcmV0dXJuVmFsID0ge307XG5cbiAgICBpZiAoY29kZVJlc3VsdC51c2VyUGFyYW1ldGVycykge1xuICAgICAgcmV0dXJuVmFsLnVzZXJQYXJhbWV0ZXJzID0gY29kZVJlc3VsdC51c2VyUGFyYW1ldGVycztcbiAgICB9XG5cbiAgICBpZiAoY29kZVJlc3VsdC5zdHlsZVNldCkge1xuICAgICAgcmV0dXJuVmFsLnN0eWxlU2V0ID0gY29kZVJlc3VsdC5zdHlsZVNldDtcbiAgICB9XG5cbiAgICBpZiAoY29kZVJlc3VsdC5sb2cpIHtcbiAgICAgIHJldHVyblZhbC5sb2cgPSBjb2RlUmVzdWx0LmxvZztcbiAgICB9XG5cbiAgICBpZiAoKGNvZGVSZXN1bHQubW9kZWxzKSAmJiBjb2RlUmVzdWx0Lm1vZGVscyAhPSAnbGVnYWN5Jykge1xuICAgICAgLy9UT0RPOiBmaXggdGhpcyBzbyB1c2VycyBqdXN0IGFzc2lnbiB0byB0aGlzLm1vZGVscyBhbHdheXMgKHRvIHByZXZlbnQgbmFtZXNwYWNlIHBvbGx1dGlvbiBvZiB1c2VyIHRoaW5ncylcbiAgICAgIC8vRXhwZWN0IG1vZGVscyB0byBiZSBhIG5hbWVkIG9iamVjdFxuXG4gICAgICBsZXQgbW9kZWxBcnJheSA9IFtdO1xuICAgICAgbW9kZWxBcnJheSA9IE9iamVjdC5rZXlzKGNvZGVSZXN1bHQubW9kZWxzKS5tYXAoKGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gY29kZVJlc3VsdC5tb2RlbHNba2V5XVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVyblZhbC5vdXRwdXQgPSBtb2RlbEFycmF5O1xuICAgIH0gIGVsc2UgaWYgKChjb2RlUmVzdWx0KSAmJiAoT2JqZWN0LmtleXMoY29kZVJlc3VsdCkubGVuZ3RoID4gMCkpIHtcbiAgICAgIC8vT25seSBpZiBtb2RlbHMgaXNuJ3QgYXNzaWduZWQgc2hvdWxkIHdlIGxvb2sgdGhyb3VnaCB0aGUgd2hvbGUgb2JqZWN0XG4gICAgICAvL0Fzc3VtZSBldmVyeXRoaW5nIGluc2lkZSB3aGF0IHdlIHdlcmUgZ2l2ZW4gaXMgYSBtb2RlbCBleGNlcHQgdGhlIGtleXdvcmRzIGFib3ZlXG4gICAgICBsZXQgbW9kZWxBcnJheSA9IFtdO1xuICAgICAgbW9kZWxBcnJheSA9IE9iamVjdC5rZXlzKGNvZGVSZXN1bHQpLmZpbHRlcihrZXkgPT4gKCFbJ3VzZXJQYXJhbWV0ZXJzJywnc3R5bGVTZXQnLCdtb2RlbHMnLCdsb2cnLCdpbnN0cnVjdGlvbnMnLCdib20nLCdub3RlcyddLmluY2x1ZGVzKGtleSkpKS5tYXAoKGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gY29kZVJlc3VsdFtrZXldXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuVmFsLm91dHB1dCA9IG1vZGVsQXJyYXk7XG4gICAgfVxuXG4gIH1cbiAgY29uc29sZVxuICByZXR1cm4gcmV0dXJuVmFsO1xuXG59XG4iLCJpbXBvcnQgeyBSZW5kZXJFbmdpbmUgfSBmcm9tICcuL3JlbmRlcmVuZ2luZS5qcyc7XG4vL1JlbmRlcmluZyBlbmdpbmUgd29ya2VyIHRocmVhZFxuc2VsZi5vbm1lc3NhZ2UgPSAoeyBkYXRhIH0pID0+IHtcblxuICBsZXQgaGFuZGxlUmVuZGVyUmVzcG9uc2UgPSAocmVzcG9uc2VEYXRhKSA9PiB7XG4gICAgc2VsZi5wb3N0TWVzc2FnZShyZXNwb25zZURhdGEpXG4gIH1cblxuICBsZXQgcmVuZGVyRW5naW5lID0gbmV3IFJlbmRlckVuZ2luZTtcbiAgaWYgKGRhdGEudHlwZSA9PSAncmVuZGVyUmVxdWVzdCcpIHtcbiAgICByZW5kZXJFbmdpbmUucmVuZGVyQ29kZShcbiAgICAgIGRhdGEuY29kZSxcbiAgICAgIGRhdGEub3B0aW9ucyxcbiAgICAgIGhhbmRsZVJlbmRlclJlc3BvbnNlXG4gICAgKVxuICB9XG5cbn07XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbi8vIHRoZSBzdGFydHVwIGZ1bmN0aW9uXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnggPSAoKSA9PiB7XG5cdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuXHQvLyBUaGlzIGVudHJ5IG1vZHVsZSBkZXBlbmRzIG9uIG90aGVyIGxvYWRlZCBjaHVua3MgYW5kIGV4ZWN1dGlvbiBuZWVkIHRvIGJlIGRlbGF5ZWRcblx0dmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbOF0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDc0NjQpKSlcblx0X193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyhfX3dlYnBhY2tfZXhwb3J0c19fKTtcblx0cmV0dXJuIF9fd2VicGFja19leHBvcnRzX187XG59O1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3MgYW5kIHNpYmxpbmcgY2h1bmtzIGZvciB0aGUgZW50cnlwb2ludFxuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLmJ1bmRsZS5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBjaHVua3Ncbi8vIFwiMVwiIG1lYW5zIFwiYWxyZWFkeSBsb2FkZWRcIlxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0ODI1OiAxXG59O1xuXG4vLyBpbXBvcnRTY3JpcHRzIGNodW5rIGxvYWRpbmdcbnZhciBpbnN0YWxsQ2h1bmsgPSAoZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHRmb3IodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdHdoaWxlKGNodW5rSWRzLmxlbmd0aClcblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZHMucG9wKCldID0gMTtcblx0cGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG59O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5mLmkgPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0Ly8gXCIxXCIgaXMgdGhlIHNpZ25hbCBmb3IgXCJhbHJlYWR5IGxvYWRlZFwiXG5cdGlmKCFpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0aW1wb3J0U2NyaXB0cyhfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCkpO1xuXHRcdH1cblx0fVxufTtcblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtcIl0gPSBzZWxmW1wid2VicGFja0NodW5rXCJdIHx8IFtdO1xudmFyIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uID0gY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSBpbnN0YWxsQ2h1bms7XG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3QiLCIvLyBydW4gc3RhcnR1cFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLngoKTtcbiJdLCJuYW1lcyI6WyJkZWZlcnJlZCIsIm5leHQiLCJFbXB0eU1vZGVsIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwicGF0aHMiLCJtb2RlbHMiLCJ1bml0cyIsIkZpbGxldGVkUGF0aE1vZGVsIiwicGF0aFBvaW50cyIsImZpbGxldFJhZGlpIiwiY2xvc2VkIiwic3VwZXIiLCJwYXRoUGFpcnMiLCJwdXNoIiwiaSIsImxlbmd0aCIsIm1hcCIsInBhdGhQYWlyIiwiYXJjcyIsImZvckVhY2giLCJmaWxsZXRSYWRpdXMiLCJpbmRleCIsImNvbmNhdCIsImFkZFBhdGgiLCJPZmZzZXRMaW5lc0F0SW50ZXJ2YWxzIiwiYmFzZUxpbmVTdGFydCIsImJhc2VMaW5lRW5kIiwiaW50ZXJ2YWxzIiwicmVsYXRpdmVJbnRlcnZhbHMiLCJsaW5lTGF5ZXIiLCJmbGlwUG9zaXRpdmVEaXJlY3Rpb24iLCJleHRlbnNpb25MaW5lQW5nbGUiLCJjdW11bGF0aXZlRXh0ZW5zaW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiaW50ZXJ2YWxEaXN0Iiwib2Zmc2V0TGluZSIsImRpc3RQb2ludCIsIkNvZGVSdW5uZXJVdGlscyIsImxpbmVGcm9tUG9pbnRBdEFuZ2xlIiwiZnJvbVBvaW50IiwiYW5nbGVJbkRlZ3JlZXMiLCJhbmdsZUluUmFkaWFucyIsInRvUG9pbnQiLCJlbmFibGVTcGxpdHRpbmciLCJtb2RlbFRvU2V0Iiwic3BsaXQiLCJpZk5lZWRlZCIsImF4aXMiLCJhdXRvQ2FwdGlvbk1vZGVsIiwibW9kZWxUb0NhcHRpb24iLCJjYXB0aW9uIiwidGV4dEhlaWdodCIsImxvY2F0aW9uIiwibW9kZWxFeHRlbnRzIiwibG93IiwiaGlnaCIsImNsb25lQW5kT2Zmc2V0IiwibW9kZWxUb0Nsb25lIiwib2Zmc2V0IiwicG9pbnRGcm9tUG9pbnRBdEFuZ2xlIiwicG9pbnRGcm9tUG9pbnRMaW5lQXRBbmdsZSIsInAxIiwicDIiLCJkaXN0YW5jZSIsInBhcmFtcyIsIk9iamVjdCIsImFzc2lnbiIsImNsb2Nrd2lzZSIsImFuZ2xlIiwiaW5zZXQiLCJwb2ludEFuZ2xlIiwiciIsIk1hdGgiLCJzaW4iLCJQSSIsInRhYlBvaW50c0Zyb21Qb2ludExpbmUiLCJiYXNlSW5zZXQiLCJiYXNlSW5zZXQyIiwiYW5nbGUyIiwicGkxIiwic2xpY2UiLCJwaTIiLCJ0YWJQMSIsInRhYlAyIiwicmVzdWx0IiwicmVsYXRpdmVQb2ludExpc3RUb0Fic29sdXRlIiwicG9pbnRzIiwibGFzdFBvaW50IiwidGhpc1BvaW50IiwiYWJzUG9pbnQiLCJkcmF3RW5nbGlzaFBvaW50IiwiZnJvbSIsInRvIiwib3B0aW9ucyIsInJpc2VyUENUIiwicmlzZXJIZWlnaHQiLCJsaW5lQW5nbGUiLCJvcmlnaW5Gcm9tIiwib3JpZ2luVG8iLCJtaWRQb2ludCIsImNpcmNsZUZyb20iLCJjaXJjbGVUbyIsImludGVyc2VjdGlvbiIsImludGVyc2VjdGlvbkRpc3RhbmNlIiwiaW50ZXJzZWN0aW9uUG9pbnRzIiwibWlkUG9pbnRUaXAiLCJtaWRQb2ludEFuZ2xlRnJvbSIsIm1pZFBvaW50QW5nbGVUbyIsImVuZ2xpc2hQb2ludCIsImFkZFRhYkF0UG9pbnRMaW5lQXRMaW5lSW5kZXgiLCJwb2ludExpbmUiLCJhdXRvV3JhcCIsInAySW5kZXgiLCJ0YWJQb2ludHMiLCJzcGxpY2UiLCJkZXRlcm1pbmVCZW5kQWxsb3dhbmNlIiwibWF0ZXJpYWxUaGlja25lc3MiLCJpbm5lclJhZGl1cyIsImsiLCJzaW5nbGVTaWRlZCIsIm1heCIsImJlbmRBbGxvd2FuY2UiLCJjaG9yZGFsVHJhcGV6b2lkUG9pbnRMaW5lIiwicmFkaXVzRGVsdGEiLCJpbm5lckNob3JkTGVuZ3RoIiwib3V0ZXJDaG9yZExlbmd0aCIsIm91dGVyUmFkaXVzIiwiY2FyZFNsb3RQb2ludExpbmUiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJ0U2xvdCIsImJhc2VXaWR0aFBDVCIsImJhc2VXaWR0aCIsInN0aXRjaEFsbG93YW5jZSIsInNpZGVJbnNldCIsImNhcmRTdGlja091dFBDVCIsImNhcmRTdGlja091dCIsInNsb3RSaXNlQW1vdW50UENUIiwic2xvdFJpc2VBbW91bnQiLCJ0b3BMaW5lU2xvcGVQQ1QiLCJ0b3BMaW5lU2xvcGVSaXNlIiwidG9wTGluZVBvaW50cyIsInBhbmVsSGVpZ2h0IiwicGFuZWxXaWR0aCIsIkhlYXBQYWNrZXIiLCJhcHBsaWVkT3B0aW9ucyIsImRlZmF1bHRQYWNrQXJlYUhlaWdodCIsImRlZmF1bHRQYWNrQXJlYVdpZHRoIiwiZ3Jvd0xpbWl0SGVpZ2h0IiwiZ3Jvd0xpbWl0V2lkdGgiLCJjYW5Hcm93UGFja0FyZWEiLCJjYW5BZGRQYWNrQXJlYXMiLCJhdmFpbGFibGVIZWFwIiwicGFja0FyZWFEZWZpbml0aW9ucyIsInBhY2tBcmVhTWF4SW5kZXgiLCJwYWNrZWRCbG9ja3MiLCJhZGRQYWNrQXJlYSIsInBhY2tlZEFyZWFzIiwicGFja0FyZWEiLCJpZCIsImEiLCJoIiwidyIsImJsb2NrcyIsImZpbHRlciIsImJsb2NrIiwiYWRkUGFja0FyZWFXaWR0aCIsImFkZFBhY2tBcmVhSGVpZ2h0IiwibmV3UGFja0FyZWEiLCJ4IiwieSIsImdyb3dQYWNrQXJlYSIsImdyb3dUb0ZpdFdpZHRoIiwiZ3Jvd1RvRml0SGVpZ2h0IiwicGFja0FyZWFJZCIsImVkaXRpbmdQYWNrQXJlYSIsImZpbmQiLCJncm93T25XaWR0aCIsImFjdHVhbEZpbmFsV2lkdGgiLCJhY3R1YWxGaW5hbEhlaWdodCIsInBhY2tBcmVhSGVhcHMiLCJoZWFwIiwicmlnaHRTaWRlRGVsdGEiLCJib3R0b21TaWRlRGVsdGEiLCJzIiwiZSIsInNvcnRIZWFwRm9yUGFja2luZyIsInNvcnRCbG9ja3NGb3JQYWNraW5nIiwiYmxvY2tzVG9QYWNrIiwic29ydCIsImIiLCJzcGxpdFJlbWFpbmluZ0hlYXAiLCJoZWFwQXJlYSIsInNwbGl0QSIsInNwbGl0QiIsInBhY2tCbG9ja0luQXZhaWxhYmxlQXJlYXMiLCJibG9ja1BhY2tlZCIsImZpdHRpbmdIZWFwSW5kZXgiLCJmaW5kSW5kZXgiLCJmaXR0aW5nSGVhcCIsInBhY2tlZEJsb2NrIiwicm90YXRlZCIsIm1vZGVsIiwiaGVhcFJlbWFpbmluZyIsInRyaW1FbXB0eVBhY2tBcmVhcyIsInZhbGlkUGFja0FyZWFzIiwiaW5jbHVkZXMiLCJwYWNrQmxvY2siLCJNb2RlbFNwbGl0dGVyIiwidHJpbU1vZGVsVG9MaW5lIiwibW9kZWxUb1NsaWNlIiwibGluZUF0Iiwia2VlcFBvc2l0aXZlU2lkZSIsImFsb25nWEF4aXMiLCJvdmVybGFwIiwiaW5jbHVkZUN1dHRpbmdMaW5lSGludCIsImFzQ2xvbmUiLCJjdXR0ZXJQYXRoRXh0ZW5zaW9uIiwiY3V0dGVyUGF0aCIsImJvdW5kaW5nQm94IiwiYm91bmRpbmdCb3hXaWR0aCIsImJvdW5kaW5nQm94T2Zmc2V0WCIsImJvdW5kaW5nQm94SGVpZ2h0IiwiYm91bmRpbmdCb3hPZmZzZXRZIiwibW9kZWxTaXplIiwiY29uc29sZSIsImxvZyIsImhlaWdodCIsIndpZHRoIiwib25QYXRoIiwiY29udGV4dCIsInBhdGhJbnRlcnNlY3Rpb24iLCJwYXRoQ29udGV4dCIsImludGVyc2VjdGlvblBvaW50IiwibW9kZWxDb250ZXh0IiwicGF0aElkIiwiY3V0dGluZ0xpbmVIaW50Iiwic3BsaXRNb2RlbCIsIm1vZGVsVG9TcGxpdCIsInNwbGl0QXRQY3QiLCJzcGxpdEF0RGlzdCIsIk1vZGVsUGFja2VyIiwicGFja2luZ09wdGlvbnMiLCJwYWdlU2l6ZSIsInBhZ2VTaXplR3Jvd0xpbWl0IiwiY2FuQWRkUGFnZXMiLCJjYW5Hcm93UGFnZVNpemUiLCJhbGxvd1JvdGF0aW9uIiwiYWxsb3dTcGxpdHRpbmciLCJtYXhTcGxpdEl0ZXJhdGlvbnMiLCJjcmVhdGVNb2RlbEJsb2NrIiwiYmxvY2tpZCIsInNwbGl0Q291bnQiLCJwYWNrTW9kZWxzIiwiZmFpbGluZ01vZGVscyIsInJlZHVjZSIsImFjY3VtdWxhdG9yIiwibW9kZWxCbG9jayIsImhlYXBQYWNrZXIiLCJyb3RhdGVCbG9jayIsInRlbXBXIiwidW5wYWNrZWRCbG9ja3MiLCJza2lwU3BsaXR0aW5nQmxvY2tzIiwibW9kZWxTcGxpdHRlciIsImN1cnJlbnRCbG9ja0luZGV4IiwiY29udGludWVTcGxpdHRpbmciLCJibG9ja0NhblNwbGl0Iiwic3BsaXRNb2RlbHMiLCJzaWRlQSIsInNpZGVCIiwicGFja2VkUGFnZXMiLCJwYWNrZWRQYWdlIiwicGFnZU1vZGVsIiwicGFnZXMiLCJvcmlnaW4iLCJwYWdlQmxvY2tNb2RlbCIsImFuY2hvciIsInVucGFja2VkTW9kZWxzIiwibW1Ub1BERlBQSSIsIm1tRGlzdGFuY2UiLCJSZW5kZXJFbmdpbmUiLCJyZW5kZXJJblByb2dyZXNzIiwiZ2V0UmVuZGVySW5Qcm9ncmVzcyIsInNjYWxlTW9kZWxUb1BERlBQSSIsInNjYWxlIiwicmVuZGVyTW9kZWxUb1NWRyIsInJlbmRlck9wdHMiLCJyZW5kZXJPcHRpb25zIiwic3R5bGVTZXQiLCJzdGl0Y2giLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsImNzc1N0eWxlIiwiY2VudGVyIiwiaGludCIsInVzZVN2Z1BhdGhPbmx5IiwibGF5ZXJPcHRpb25zIiwicmVuZGVyUGFnZU1vZGVsc1RvU1ZHIiwicGFnZU1vZGVscyIsInN2Z1BhZ2VzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJtb2RlbFRvUERGIiwiZG9jIiwicGFnZU1hcmdpbnMiLCJsYXllclN0eWxlcyIsImJhc2UiLCJzdHJva2VDb2xvciIsInNjYWxlZE1vZGVsIiwic3ZnUGF0aHMiLCJsZWZ0IiwidG9wIiwiYnlMYXllcnMiLCJrZXkiLCJ2YWx1ZSIsImVudHJpZXMiLCJzYXZlIiwicGF0aCIsInN0eWxlIiwibGluZVdpZHRoIiwiZGFzaGVkIiwiZGFzaCIsInVuZGFzaCIsInJlc3RvcmUiLCJtb2RlbENhcHRpb24iLCJ0ZXh0IiwiZW5kIiwiYmFzZWxpbmUiLCJyZW5kZXJQYWdlTW9kZWxzVG9QREYiLCJwYXR0ZXJuSm9pbkxpbmUiLCJsYXlvdXQiLCJyaWdodCIsImJvdHRvbSIsInBkZlBhZ2VTZXR0aW5ncyIsInNpemUiLCJhdXRvRmlyc3RQYWdlIiwic3RyZWFtIiwicGlwZSIsInBhZ2UiLCJhZGRQYWdlIiwicmVqZWN0Iiwib24iLCJibG9iIiwidG9CbG9iIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInJlYWRBc0RhdGFVUkwiLCJvbmxvYWRlbmQiLCJibG9iVG9CYXNlNjQiLCJyZW5kZXJDb2RlIiwiY29kZSIsInJlc3BvbnNlQ2FsbGJhY2siLCJmb3JtYXQiLCJwYWNrVG9QYWdlcyIsIm1vZGVsc0ZvclBhZ2VQYWNraW5nIiwiZHJhd0NvZGUiLCJ1c2VyUGFyYW1ldGVycyIsIkNvZGVXcmFwcGVyRnVuY3Rpb24iLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsImNydSIsImNvZGVSZXN1bHQiLCJyZXR1cm5WYWwiLCJtb2RlbEFycmF5Iiwia2V5cyIsIm91dHB1dCIsInJ1bkRyYXdDb2RlIiwicGFja2luZ1Jlc3VsdCIsInJlbmRlcmVkUGFnZXMiLCJ0aGVuIiwicmVuZGVyZWREYXRhIiwidHlwZSIsImNvbnRlbnRUeXBlIiwicmVuZGVyRm9yIiwic3VjY2Vzc0NvbnRlbnQiLCJlcnJvckNvbnRlbnQiLCJsb2dNZXNzYWdlcyIsInJlc2V0Iiwic2VsZiIsIm9ubWVzc2FnZSIsImRhdGEiLCJyZW5kZXJFbmdpbmUiLCJyZXNwb25zZURhdGEiLCJwb3N0TWVzc2FnZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsIl9fd2VicGFja19leHBvcnRzX18iLCJPIiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJmdWxmaWxsZWQiLCJqIiwiZXZlcnkiLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImYiLCJjaHVua0lkIiwiYWxsIiwicHJvbWlzZXMiLCJ1IiwiZyIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJvYmoiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiZG9jdW1lbnQiLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiRXJyb3IiLCJyZXBsYWNlIiwicCIsImluc3RhbGxlZENodW5rcyIsImNodW5rTG9hZGluZ0dsb2JhbCIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiYmluZCIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInBvcCJdLCJzb3VyY2VSb290IjoiIn0=